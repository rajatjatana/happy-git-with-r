[
["index.html", "Happy Git and GitHub for the useR A living book", " Happy Git and GitHub for the useR Jenny Bryan, the STAT 545 TAs, Jim Hester 2018-12-30 A living book Still from Heaven King video Repo that makes this site: https://github.com/jennybc/happy-git-with-r Present and quite stable, goal is to stay very current: Instructions for Git/GitHub/R/RStudio installation and set-up Early and fundamental workflows using Git and GitHub with R and RStudio. Including special tips for the effective use of R Markdown and the rmarkdown package with GitHub. Present and still growing, within some limits: More on Git itself. However we have no ambitions to be a full substitute for other comprehensive Git references. Intermediate and advanced workflows, with a special emphasis on concerns relevant to useRs, data analysts, etc. Present but stale / stalled. Using GitHub to run a course. Happy Git and GitHub for the useR by Jennifer Bryan is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License. "],
["big-picture.html", "Chapter 1 Why Git? Why GitHub? 1.1 Why Git? 1.2 Why GitHub? 1.3 Is it going to hurt? 1.4 What is the payoff? 1.5 Who can do what? 1.6 Special features of GitHub 1.7 What’s special about using R with Git and GitHub? 1.8 Audience and pre-reqs 1.9 What this is NOT", " Chapter 1 Why Git? Why GitHub? Why would a data analyst use hosted version control? This intro has grown into a stand-alone article that is arguably a better introduction at this point. Until I merge it back in, consider reading the article instead: “Excuse me, do you have a moment to talk about version control?” https://dx.doi.org/10.7287%2Fpeerj.preprints.3159v2. 1.1 Why Git? Git is a version control system. Its original purpose was to help groups of developers work collaboratively on big software projects. Git manages the evolution of a set of files – called a repository – in a sane, highly structured way. If you have no idea what I’m talking about, think of it as the “Track Changes” features from Microsoft Word on steroids. Git has been re-purposed by the data science community. In addition to using it for source code, we use it to manage the motley collection of files that make up typical data analytical projects, which often consist of data, figures, reports, and, yes, source code. A solo data analyst, working on a single computer, will benefit from adopting version control. But not nearly enough to justify the pain of installation and workflow upheaval. There are much easier ways to get versioned back ups of your files, if that’s all you’re worried about. In my opinion, for new users, the pros of Git only outweigh the cons when you factor in the overhead of communicating and collaborating with other people. Who among us does not need to do that? Your life is much easier if this is baked into your workflow, as opposed to being a separate process that you dread or neglect. 1.2 Why GitHub? This is where hosting services like GitHub, Bitbucket, and GitLab come in. They provide a home for your Git-based projects on the internet. If you have no idea what I’m talking about, think of it as DropBox but much, much better. The remote host acts as a distribution channel or clearinghouse for your Git-managed project. It allows other people to see your stuff, sync up with you, and perhaps even make changes. These hosting providers improve upon traditional Unix Git servers with well-designed web-based interfaces. Even for private solo projects, it’s a good idea to push your work to a remote location for peace of mind. Why? Because it’s fairly easy to screw up your local Git repository, especially when you’re new at this. The good news is that often only the Git infrastructure is borked up. Your files are just fine! Which makes your Git pickle all the more frustrating. There are official Git solutions to these problems, but they might require expertise and patience you can’t access at 3a.m. If you’ve recently pushed your work to GitHub, it’s easy to grab a fresh copy, patch things up with the changes that only exist locally, and get on with your life. We target GitHub – not Bitbucket or GitLab – for the sake of specificity. However, all the big-picture principles and even some mechanics will carry over to these alternative hosting platforms. Don’t get too caught up on public versus private at this point. There are many ways to get private repositories from the major providers for low or no cost. Just get started and figure out if and how Git/GitHub is going to work for you! If you outgrow this arrangement, you can throw some combination of technical savvy and money at the problem. You can either pay for a higher level of service or self-host one of these platforms. 1.3 Is it going to hurt? Yes. You have to install Git, get local Git talking to GitHub, and make sure RStudio can talk to local Git (and, therefore, GitHub). This is one-time or once-per-computer pain. For new or existing projects, you will: Dedicate a directory (a.k.a “folder”) to it. Make it an RStudio Project. Make it a Git repository. Go about your usual business. But instead of only saving individual files, periodically you make a commit, which takes a multi-file snapshot of the entire project. Have you ever versioned a file by adding your initials or the date? That is effectively a commit, albeit only for a single file: it is a version that is significant to you and that you might want to inspect or revert to later. Push commits to GitHub periodically. This is like sharing a document with colleagues on DropBox or sending it out as an email attachment. It signals you’re ready to make your work visible to others and invite comment or edits. This is a change to your normal, daily workflow. It feels weird at first but quickly becomes second nature. FWIW, STAT 545 students are required to submit all coursework via GitHub. This is a major topic in class and office hours for the first two weeks. Then we practically never discuss it again. More bad news. The STAT 545 pain is short-lived because students primarily work in their own repositories. Do you use GitHub to work with other people or to coordinate your own work from multiple computers? If so, after you recover from the initial setup, Git will crush you again with merge conflicts. And this is not one-time pain, this could be a dull ache for a long time. The best remedy is prevention, but also understanding how to back out of tricky situations and tackle them on your own terms. The rest of this site is dedicated to walking you through the necessary setup and creating your first few Git projects. We conclude with prompts that guide you through some of the more advanced usage that makes all of this initial pain worthwhile. 1.4 What is the payoff? Exposure: If someone needs to see your work or if you want them to try out your code, they can easily get it from GitHub. If they use Git, they can clone or fork your repository. If they don’t use Git, they can still browse your project on GitHub like a normal website and even grab everything by downloading a zip archive. Be a keener! If you care deeply about someone else’s project, such as an R package you use heavily, you can track its development on GitHub. You can watch the repository to get notified of major activity. You can fork it to keep your own copy. You can modify your fork to add features or fix bugs and send them back to the owner as a proposed change. Collaboration: If you need to collaborate on data analysis or code development, then everyone should use Git. Use GitHub as your clearinghouse: individuals work independently, then send work back to GitHub for reconciliation and transmission to the rest of the team. The advantage of Git/GitHub is highlighted by comparing these two ways of collaborating on a document: Edit, save, attach. In this workflow, everyone has one (or more!) copies of the document and they circulate via email attachment. Which one is “master”? Is it even possible to say? How do different versions relate to each other? How should versions be reconciled? If you want to see the current best version, how do you get it? All of this usually gets sorted out by social contract and a fairly manual process. Google Doc. In this workflow, there is only one copy of the document and it lives in the cloud. Anyone can access the most recent version on demand. Anyone can edit or comment or propose a change and this is immediately available to everyone else. Anyone can see who’s been editing the document and, if disaster strikes, can revert to a previous version. A great deal of ambiguity and annoying reconciliation work has been designed away. Managing a project via Git/GitHub is much more like the Google Doc scenario and enjoys many of the same advantages. It is definitely more complicated than collaborating on a Google Doc, but this puts you in the right mindset. 1.5 Who can do what? A public repository is readable by the world. The owner can grant higher levels of permission to others, such as the ability to push commits. A private repository is invisible to the world. The owner can grant read, write (push), or admin access to others. There is also a formal notion of an organization, which can be useful for managing repository permissions for entire teams of people. 1.6 Special features of GitHub this is perhaps too detailed … full stop? or does it belong elsewhere? In addition to a well-designed user interface, GitHub offers two especially important features: Issues. Remember how we’re high-jacking software development tools? Well, this is the bug tracker. It’s a list of things … bugs, feature requests, to dos, whatever. Issues are tightly integrated with email and therefore allow you to copy/embed important conversations in the associated repo. Issues can be assigned to people (e.g., to dos) and tagged (“bug” or “progress-report”). Issues are tightly integrated with commits and therefore allow you to record that the changes in this commit solve that problem which was discussed in that issue. As a new user of GitHub, one of the most productive things you can do is to use GitHub issues to provide a clear bug report or feature request for a package you use. Pull requests. Git allows a project to have multiple, independent branches of development, with the notion that some should eventually be merged back into the main development branch. These are technical Git terms but hopefully also make sense on their own. A pull request is a formal proposal that says: “Here are some changes I would like to make.” It might be linked to a specific issue: “Related to #14.” or “Fixes #56”. GitHub facilitates and preserves the discussion of the proposal, holistically and line-by-line. 1.7 What’s special about using R with Git and GitHub? The active R package development community on GitHub. Read about R-specific GitHub resources and searching here. Specific workflows make it rewarding to share source code, rendered reports, and entire projects. Read more about R Markdown, R scripts, and R-heavy projects. Git- and GitHub-related features of the RStudio IDE. This is covered throughout. 1.8 Audience and pre-reqs The target audience for this site is someone who analyzes data, probably with R, though some of the content may be useful to analysts using other languages. R package development with Git(Hub) is absolutely in scope, but it is not an explicit focus or requirement. The site is aimed at intermediate to advanced R users, who are comfortable writing R scripts and managing R projects. You should have a good grasp of files and directories and be generally knowledgeable about where things live on your computer. Although we will show alternatives for most Git operations, we will inevitably spend some time in the shell and we assume some prior experience. For example, you should know how to open up a shell, navigate to a certain directory, and list the files there. You should be comfortable using shell commands to view/move/rename files and to work with your command history. 1.9 What this is NOT We aim to teach novices about Git on a strict “need to know” basis. Git was built to manage development of the Linux kernel, which is probably very different from what you do. Most people need a small subset of Git’s functionality and that will be our focus. If you want a full-blown exposition of Git as a directed acyclic graph or a treatise on the Git-Flow branching strategy, you will be sad. "],
["contrib.html", "Chapter 2 Contributors", " Chapter 2 Contributors Jenny Bryan (jennybryan.org), Software Engineer at RStudio on the tidyverse/r-lib team. Main author and content wrangler. The development and delivery of this material has also benefited greatly from contributions by: Dean Attali (deanattali.com), Shiny consultant and STAT 545 TA alum. Bernhard Konrad, Software Engineer at Google and STAT 545 TA alum. Shaun Jackman (sjackman.ca), Bioinformatics Ph.D. student at UBC, lead maintainer of Linuxbrew, and STAT 545 TA alum. Jim Hester (jimhester.com), Software Engineer at RStudio on the tidyverse/r-lib team. A growing number of GitHub contributors "],
["workshops.html", "Chapter 3 Workshops 3.1 Pre-workshop set-up 3.2 rstudio::conf 2019 3.3 Seattle October 2018 3.4 rstudio::conf 2018 3.5 CSAMA 2017: Statistical Data Analysis for Genome Biology 3.6 satRday Cape Town 2017 3.7 rstudio::conf 2017 3.8 CSAMA 2016: Statistical Data Analysis for Genome Biology 3.9 useR! 2016 Stanford", " Chapter 3 Workshops These materials can be used for independent study, but they have also been used to support: in-person workshops (see below) STAT 545 at UBC UBC Master of Data Science 3.1 Pre-workshop set-up Optional reading on the big picture motivation: Why Git? Why GitHub? It is vital that you attempt to set up your system in advance. You cannot show up at the workshop with no preparation and keep up! Try this. Best case scenario is about 1 - 2 hours. If you hit a wall, we will help: Register a free GitHub account. Install or update R and RStudio. Install Git. Introduce yourself to Git. Prove local Git can talk to GitHub. Cache your username and password or set up SSH keys so you don’t need to authenticate yourself to GitHub interactively ad nauseum. Prove RStudio can find local Git and, therefore, can talk to GitHub. FYI: this is where our hands-on activities usually start. We walk through a similar activity together, with narrative, and build from there. Troubleshooting: Sometimes RStudio needs a little help finding Git. General troubleshooting: RStudio, Git, GitHub Hell. These are battle-tested instructions, so most will succeed. We believe in you! If you have trouble, reach out for help and stick with it. Where to get help: If you are enrolled in an upcoming workshop, find it below to get specifics on pre-workshop support. We might be able to respond to a GitHub issue here. If there is a clear R/RStudio angle, post on https://community.rstudio.com. General advice: search with Google and on https://stackoverflow.com, see also https://github.community. 3.2 rstudio::conf 2019 2-day workshop: What They Forgot to Teach You About R Will have substantial coverage of Git/GitHub + R/Rmd/RStudio January 15-16, rstudio::conf 2019 Training Days, Austin, TX Registered workshop participants should use this thread (WILL EXIST SOON) on community.rstudio.com to discuss system prep woes. 3.3 Seattle October 2018 2-day workshop: What They Forgot to Teach You About R 3 of 8 units cover Git/GitHub + R/Rmd/RStudio Oct 4-5, 2018, The Westin Seattle REGISTRATION OPEN 3.4 rstudio::conf 2018 2-day workshop: What They Forgot to Teach You About R ~25% of content was Git/GitHub + R/Rmd/RStudio Jan 31 &amp; Feb 1, 2018, San Diego, CA 3.5 CSAMA 2017: Statistical Data Analysis for Genome Biology http://www.huber.embl.de/csama2017/ June 11-16, 2017, Bressanone-Brixen, Italy 3.6 satRday Cape Town 2017 http://capetown2017.satrdays.org February 16 - 18, 2017, Cape Town, South Africa 3.7 rstudio::conf 2017 https://www.rstudio.com/conference/ January 13 - 14, 2017, Orlando, FL Saturday January 14, 10:15am to 12:30pm, Sun Ballroom B 3.8 CSAMA 2016: Statistical Data Analysis for Genome Biology http://www.huber.embl.de/csama2016/ July 10 - 15, 2016, Bressanone-Brixen, Italy 3.9 useR! 2016 Stanford Monday, June 27, 2016 Full description on the main useR! website "],
["installation-pain.html", "Chapter 4 Installation pain 4.1 Success and operating systems", " Chapter 4 Installation pain Getting all the necessary software installed, configured, and playing nicely together is honestly half the battle here. Brace yourself for some pain. The upside is that you can give yourself a pat on the back once you get through this. And you WILL get through this. You will find far more resources for how to use Git than for installation and configuration. Why? The experts … Have been doing this for years. It’s simply not hard for them anymore. Probably use some flavor of Unix. They may secretly (or not so secretly) take pride in neither using nor knowing Windows. Get more satisfaction and reward for thinking and writing about Git concepts and workflows than Git installation. In their defense, it’s hard to write installation instructions. Failures can be specific to an individual OS or even individual computer. If you have some new problem and, especially, the corresponding solution, we’d love to hear from you! 4.1 Success and operating systems #success-and-operating-systems table { width: auto; } Our installation instructions have been forged in the fires of STAT 545, STAT 540, and assorted workshops, over several years. We regularly hear from grateful souls on the internet who also have success. Here’s data on the operating systems we encounter in STAT 545 and other workshops: overall the bulk are split sort of evenly between Mac and Windows (various flavours), with a dash of Linux. Except in a BioConductor context (CSAMA), which is dominated by Mac or Linux. 2014 2015 2016 useR! 2016 CSAMA 2016 CSAMA 2017 Mac 16 (41%) 38 (52%) 37 (45%) 28 (44%) 25 (58%) 23 (56%) Windows 10* 0 (0%) 8 (11%) 30 (36%) 27 (43%) 6 (14%) 8 (20%) Windows 8 12 (31%) 9 (12%) 4 (5%) 1 ( 2%) Windows 7 9 (23%) 13 (18%) 10 (12%) 1 ( 2%) Linux 2 (5%) 5 (7%) 2 (2%) 8 (13%) 12 (28%) 9 (20%) * Windows 10 is the Windows catchall, when I don’t have more specific info. "],
["github-acct.html", "Chapter 5 Register a GitHub account 5.1 Username advice 5.2 Free private repos 5.3 Pay for private repos", " Chapter 5 Register a GitHub account Register an account with GitHub. It’s free! https://github.com 5.1 Username advice You will be able upgrade to a paid level of service, apply discounts, join organizations, etc. in the future, so don’t fret about any of that now. Except your username. You might want to give that some thought. A few tips, which sadly tend to contradict each other: Incorporate your actual name! People like to know who they’re dealing with. Also makes your username easier for people to guess or remember. Reuse your username from other contexts, e.g., Twitter or Slack. But, of course, someone with no GitHub activity will probably be squatting on that. Pick a username you will be comfortable revealing to your future boss. Shorter is better than longer. Be as unique as possible in as few characters as possible. In some settings GitHub auto-completes or suggests usernames. Make it timeless. Don’t highlight your current university, employer, or place of residence, e.g. JennyFromTheBlock. Avoid words laden with special meaning in programming. In my first inept efforts to script around the GitHub API, I assigned lots of issues to the guy with username NA because my vector of GitHub usernames contained missing values. A variant of Little Bobby Tables. You can change your username later, but better to get this right the first time. https://help.github.com/articles/changing-your-github-username/ https://help.github.com/articles/what-happens-when-i-change-my-username/ 5.2 Free private repos GitHub offers free unlimited private repositories for users and organizations in education, academic research, nonprofits, and charities. Go ahead and register your free account NOW and then pursue any special offer that applies to you: Students, faculty, and educational/research staff: GitHub Education. GitHub “Organizations” can be extremely useful for courses or research/lab groups, where you need some coordination across a set of repos and users. Official nonprofit organizations and charities: GitHub for Good 5.3 Pay for private repos Everyone else can pay for some private repos. A personal plan with unlimited private repos is $7 / month at the time of writing. See the current plans and pricing here: https://github.com/pricing "],
["install-r-rstudio.html", "Chapter 6 Install or upgrade R and RStudio 6.1 More about R and RStudio", " Chapter 6 Install or upgrade R and RStudio Install pre-compiled binary of R for your OS: https://cloud.r-project.org Install Preview version RStudio Desktop: https://www.rstudio.com/products/rstudio/download/preview/ Update your R packages: update.packages(ask = FALSE, checkBuilt = TRUE) Read on for more detail or hand-holding. 6.1 More about R and RStudio Get current, people. You don’t want to adopt new things on day one. But at some point, running old versions of software adds unnecessary difficulty. In live workshops, there is a limit to how much we can help with ancient versions of R or RStudio. Also, frankly, there is a limit to our motivation. By definition, these problems are going away and we’d rather focus on edge cases with current versions, which affect lots of people. For more guidance on installing or upgrading R and RStudio, go here: STAT 545 page on Installing R and RStudio "],
["install-git.html", "Chapter 7 Install Git 7.1 Git already installed? 7.2 Windows 7.3 macOS 7.4 Linux", " Chapter 7 Install Git You need Git, so you can use it at the command line and so RStudio can call it. If there’s any chance it’s installed already, verify that, rejoice, and skip this step. Otherwise, find installation instructions below for your operating system. 7.1 Git already installed? Go to the shell (Appendix A). Enter which git to request the path to your Git executable: which git ## /usr/bin/git and git --version to see its version: git --version ## git version 2.15.1 If you are successful, that’s great! You have Git already. No need to install! Move on. If, instead, you see something more like git: command not found, keep reading. macOS users might get an immediate offer to install command line developer tools. Yes, you should accept! Click “Install” and read more below. 7.2 Windows Option 1 (highly recommended): Install Git for Windows, also known as msysgit or “Git Bash”, to get Git in addition to some other useful tools, such as the Bash shell. Yes, all those names are totally confusing, but you might encounter them elsewhere and I want you to be well-informed. We like this because Git for Windows leaves the Git executable in a conventional location, which will help you and other programs, e.g. RStudio, find it and use it. This also supports a transition to more expert use, because the “Git Bash” shell will be useful as you venture outside of R/RStudio. NOTE: Select “Use Git from the Windows Command Prompt” during installation. Otherwise, we believe it’s OK to accept the defaults. Note that RStudio for Windows prefers for Git to be installed below C:/Program Files and this appears to be the default. This implies, for example, that the Git executable on my Windows system is found at C:/Program Files/Git/bin/git.exe. Unless you have specific reasons to otherwise, follow this convention. This also leaves you with a Git client, though not a very good one. So check out Git clients we recommend (chapter 9). FYI, this appears to be equivalent to what you would download from here: https://git-scm.com/download/. Option 2 (recommended): Install Git for Windows via the Chocolatey package manager. If this means anything to you, Chocolatey is like apt-get or Homebrew, but for Windows instead of Debian/Ubuntu Linux or macOS. As far as I can tell, using Chocolatey to install Git for Windows gives the same result as installing it yourself (option 1). This obviously requires that you already have Chocolatey installed or that you are up for installing it. It is not hard and the instructions are here. This may be worthwhile if it seems likely you will be installing more open source software in the future. After you install Chocolatey, in a shell (Appendix A), do: choco install git.install This installs the most current Git (Install) X.Y.Z Chocolatey package. At the time of writing, that is “Git (Install) 2.20.1”, but that version number will increment over time. If you search Chocolatey packages yourself, you might see two packages that install Git – “Git (Install) 2.20.1” and “Git 2.20.1”, at the time of writing. I believe “Git (Install) 2.20.1” is technically the more correct, but I also think it doesn’t really matter which one you use. A rather confusing explanation is found here. Don’t worry too much about whether you do choco install git.install or choco install git. Option 3 (NOT recommended): The GitHub hosting site offers GitHub Desktop for Windows that provides Git itself, a client, and smooth integration with GitHub. Their Windows set-up instructions recommend this method of Git installation. Why don’t we like it? We’ve seen GitHub Desktop for Windows lead to Git installation in suboptimal locations, such as ~/AppData/Local, and in other places we could never find. If you were only going to interact with GitHub via this app, maybe that’s OK, but that does not apply to you. We are also not very fond of the GitHub Desktop client for using using Git and prefer other clients. Therefore, we strongly recommend options 1 and 2 instead. 7.3 macOS Option 1 (highly recommended): Install the Xcode command line tools (not all of Xcode), which includes Git. Go to the shell and enter one of these commands to elicit an offer to install developer command line tools: git --version git config Accept the offer! Click on “Install”. Here’s another way to request this installation, more directly: xcode-select --install We just happen to find this Git-based trigger apropos. Note also that, after upgrading macOS, you might need to re-do the above and/or re-agree to the Xcode license agreement. We have seen this cause the RStudio Git pane to disappear on a system where it was previously working. Use commands like those above to tickle Xcode into prompting you for what it needs, then restart RStudio. Option 2 (recommended): Install Git from here: http://git-scm.com/downloads. This arguably sets you up the best for the future. It will certainly get you the latest version of Git of all approaches described here. The GitHub home for the macOS installer is here: https://github.com/timcharper/git_osx_installer. At that link, you can find more info if something goes wrong or you are working on an old version of macOS. Option 3 (recommended): If you anticipate getting heavily into scientific computing, you’re going to be installing and updating lots of software. You should check out Homebrew, “the missing package manager for OS X”. Among many other things, it can install Git for you. Once you have Homebrew installed, do this in the shell: brew install git Option 4 (NOT recommended): The GitHub hosting site offers GitHub Desktop for Mac that provides the option to install Git itself, a client, and smooth integration with GitHub.. Their macOS set-up instructions recommend this method of Git installation. We don’t like GitHub Desktop as a Git client, so this is a very cumbersome way to install Git. Consider this option a last resort. 7.4 Linux Install Git via your distro’s package manager. Ubuntu or Debian Linux: sudo apt-get install git Fedora or RedHat Linux: sudo yum install git A comprehensive list for various Linux and Unix package managers: https://git-scm.com/download/linux "],
["hello-git.html", "Chapter 8 Introduce yourself to Git 8.1 More about git config", " Chapter 8 Introduce yourself to Git In the shell (Appendix A): git config --global user.name &#39;Jennifer Bryan&#39; git config --global user.email &#39;jenny@stat.ubc.ca&#39; git config --global --list substituting your name and the email associated with your GitHub account. 8.1 More about git config An easy way to get into a shell from RStudio is Tools &gt; Terminal or Tools &gt; Shell. More about the shell in the Appendix A. Special Windows gotchas: If you are struggling on Windows, consider there are different types of shell and you might be in the wrong one. Short version: you want to see MSYS or MINGW64 in the status bar, not cmd.exe. Read more in the Appendix. What user name should you give to Git? This does not have to be your GitHub username, although it can be. Another good option is your actual first name and last name. Your commits will be labelled with this name, so this should be informative to potential collaborators. What email should you give to Git? This must be the email associated with your GitHub account. These commands return nothing. You can check that Git understood what you typed by looking at the output of git config --global --list. 8.1.1 Configure the Git editor Another Git option that many people eventually configure is the editor. At some point, you will fail to give Git what it wants in terms of a commit message and it will kick you into an editor. This can be distressing, if it’s not your editor of choice and you don’t even know how to save and quit. You can enforce your will with something along these lines: git config --global core.editor &quot;emacs&quot; Substitute your preferred editor for &quot;emacs&quot; here. Software Carpentry’s Git lesson has a comprehensive listing of the exact git config command needed for many combinations of OS and editor. "],
["git-client.html", "Chapter 9 Install a Git client 9.1 What and why 9.2 A picture is worth a thousand words 9.3 Recommended Git clients", " Chapter 9 Install a Git client This is optional but highly recommended. Unless specified, it is not required for live workshops and will not be explicitly taught, though you might see us using one of these clients. 9.1 What and why Learning to use version control can be rough at first. I found the use of a GUI – as opposed to the command line – extremely helpful when I was getting started. I call this sort of helper application a Git client. It’s really a Git(Hub) client because they also help you interact with GitHub or other remotes. Git and your Git client are not the same thing, just like R and RStudio are not the same thing. A Git client and the RStudio IDE are not necessary to use Git or R, respectively, but they make the experience more pleasant because they reduce the amount of command line bullshittery. RStudio offers a very basic Git client. I use this often for simple operations, but you probably want another, more powerful one as well. Fair warning: for some things, you will have to use the command line. But the more powerful your Git client is, the less often this happens. The visual overview given by your Git client can also be invaluable for understanding the current state of things, even when preparing calls to command line Git. Fantastic news: because all of the clients are just forming and executing Git commands on your behalf, you don’t have to pick one. You can literally do one operation from the command line, do another from RStudio, and another from SourceTree, one after the other, and it just works. Very rarely, both clients will scan the repo at the same time and you’ll get an error message about .git/index.lock. Try the operation again at least once before doing any further troubleshooting. 9.2 A picture is worth a thousand words Here’s a screenshot of SourceTree (see below) open to the repository for this site. You get a nice graphical overview of the recent commit history, branches, and diffs, as well as a GUI that facilitates the most common Git operations. SourceTree screenshot In contrast, here’s a shell session where I’ve used command line Git to access some of the same information. Command line Git Which do you prefer? 9.3 Recommended Git clients SourceTree is a free, powerful Git(Hub) client that I highly recommend. It was my first Git client and is still my favorite for nontrivial Git tasks. Available for Mac and Windows. If I’m teaching you in a course or workshop, you might see me using this. GitKraken is quite new on the scene and is free. I would probably start here if I was starting today. Why? Because it works across all three OSes my students use: Windows, Mac, and Linux. I hear very good reviews, especially from long-suffering Linux users who haven’t had any great options until now. GitUp is a free, open source client for Mac OS. I’ve heard really good things about it and like what I read on the website. However, I tried to make myself use it for a day and went sort of nuts, possibly because I’m so used to SourceTree. YMMV. GitHub also offers a free Git(Hub) client for Windows and Mac. We do NOT recommend it for Windows and have serious reservations even for Mac OS. What do we object to? The degree of hand-holding offered by GitHub’s clients borders on hand-cuffs. The Windows client sometimes leaves the Git executable so well hidden that we can’t find it. This is a deal-killer, because that means RStudio can’t find it either. These clients wrap Git functionality so thoroughly that we’ve had students make some destructive mistakes. For example, we’ve seen a “sync” operation that resulted in the loss of local uncommitted changes. Exactly which Git operations, in what order, are implied by “sync”, is not entirely clear. We prefer clients that expose Git more explicitly. We’ve heard similar negative reviews from other instructors. It’s not just us. Others that I have heard positive reviews for: SmartGit git-cola magit, for Emacs nerds Browse even more Git(Hub) clients. "],
["push-pull-github.html", "Chapter 10 Connect to GitHub 10.1 Make a repo on GitHub 10.2 Clone the repo to your local computer 10.3 Make a local change, commit, and push 10.4 Confirm the local change propagated to the GitHub remote 10.5 Am I really going to type GitHub username and password on each push? 10.6 Clean up", " Chapter 10 Connect to GitHub Objective: make sure that you can pull from and push to GitHub from your computer. I do not explain all the shell (Appendix A) and Git commands in detail. This is a black box diagnostic / configuration exercise. In later chapters and in live workshops, we revisit these operations with much more narrative. 10.1 Make a repo on GitHub Go to https://github.com and make sure you are logged in. Click green “New repository” button. Or, if you are on your own profile page, click on “Repositories”, then click the green “New” button. Repository name: myrepo (or whatever you wish, we will delete this) Public YES Initialize this repository with a README Click big green button “Create repository.” Copy the HTTPS clone URL to your clipboard via the green “Clone or Download” button. 10.2 Clone the repo to your local computer Go to the shell (Appendix A). Take charge of – or at least notice! – what directory you’re in. pwd to display working directory. cd to move around. Personally, I would do this sort of thing in ~/tmp. Clone myrepo from GitHub to your computer. This URL should have your GitHub username and the name of your practice repo. If your shell (Appendix A) cooperates, you should be able to paste the whole https://.... bit that we copied above. But some shells are not (immediately) clipboard aware. In that sad case, you must type it. Accurately. git clone https://github.com/YOUR-USERNAME/YOUR-REPOSITORY.git This should look something like this: jenny@2015-mbp tmp $ git clone https://github.com/jennybc/myrepo.git Cloning into &#39;myrepo&#39;... remote: Counting objects: 3, done. remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 Unpacking objects: 100% (3/3), done. Checking connectivity... done. Make this new repo your working directory, list its files, display the README, and get some information on its connection to GitHub: cd myrepo ls head README.md git remote show origin This should look something like this: jenny@2015-mbp ~ $ cd myrepo jenny@2015-mbp myrepo $ ls README.md jenny@2015-mbp myrepo $ head README.md # myrepo tutorial development jenny@2015-mbp myrepo $ git remote show origin * remote origin Fetch URL: https://github.com/jennybc/myrepo.git Push URL: https://github.com/jennybc/myrepo.git HEAD branch: master Remote branch: master tracked Local branch configured for &#39;git pull&#39;: master merges with remote master Local ref configured for &#39;git push&#39;: master pushes to master (up to date) 10.3 Make a local change, commit, and push Add a line to README and verify that Git notices the change: echo &quot;A line I wrote on my local computer&quot; &gt;&gt; README.md git status This should look something like this: jenny@2015-mbp myrepo $ echo &quot;A line I wrote on my local computer&quot; &gt;&gt; README.md jenny@2015-mbp myrepo $ git status On branch master Your branch is up-to-date with &#39;origin/master&#39;. Changes not staged for commit: (use &quot;git add &lt;file&gt;...&quot; to update what will be committed) (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory) modified: README.md no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;) Commit this change and push to your remote repo on GitHub. If you’re a new GitHub user, you will be challenged for your GitHub username and password. Provide them! git add -A git commit -m &quot;A commit from my local computer&quot; git push The -m flag is an important message that must be included with every commit! Git requires a commit message for every commit, so if you forget the -m flag, git will prompt you for a commit message anyways. It is good practice to write meaningful commit messages so in the future, potential collaborators (and your future self) will understand the progression of a project. This should look something like this: jenny@2015-mbp myrepo $ git add -A jenny@2015-mbp myrepo $ git commit -m &quot;A commit from my local computer&quot; [master de669ba] A commit from my local computer 1 file changed, 1 insertion(+) jenny@2015-mbp myrepo $ git push Counting objects: 3, done. Delta compression using up to 8 threads. Compressing objects: 100% (2/2), done. Writing objects: 100% (3/3), 311 bytes | 0 bytes/s, done. Total 3 (delta 0), reused 0 (delta 0) To https://github.com/jennybc/myrepo.git b4112c5..de669ba master -&gt; master 10.4 Confirm the local change propagated to the GitHub remote Go back to the browser. I assume we’re still viewing your new GitHub repo. Refresh. You should see the new “A line I wrote on my local computer” in the README. If you click on “commits,” you should see one with the message “A commit from my local computer.” If you have made it this far, you are ready to graduate to using Git and GitHub with RStudio (chapter 13). But first … 10.5 Am I really going to type GitHub username and password on each push? It is likely that your first push, above, leads to a challenge for your GitHub username and password. This will drive you crazy in the long-run and make you reluctant to push. Do one of the following to eliminate this annoyance: Credential caching for HTTPS access, chapter 11. Set up SSH keys, chapter 12. Now is the perfect time to do this, since you have a functioning test repo. 10.6 Clean up Local When you’re ready to clean up, you can delete the local repo any way you like. It’s just a regular directory on your computer. Here’s how to do that in the shell, if current working directory is myrepo: cd .. rm -rf myrepo/ GitHub In the browser, go to your repo’s landing page on GitHub. Click on “Settings”. Scroll down, click on “delete repository,” and do as it asks. "],
["credential-caching.html", "Chapter 11 Cache credentials for HTTPS 11.1 Get a test repository 11.2 Verify that your Git is new enough to have a credential helper 11.3 Turn on the credential helper", " Chapter 11 Cache credentials for HTTPS If you plan to push/pull using HTTPS, you want Git to cache your credentials (username, password) (or you should set up SSH keys, chapter 12), so you don’t need to enter them over and over again. I suggest you set up one of these methods of authentication on each computer you want to connect to GitHub from. I find HTTPS easier to get working quickly. It is what GitHub recommends, presumably for exactly the same reasons. I started with HTTPS, but eventually swiched over to SSH. Either is fine and you can change your mind later. I do not explain all the shell (Appendix A) and Git commands in detail. This is a black box diagnostic / configuration exercise. 11.1 Get a test repository You need a functioning test Git repository. One that exists locally and remotely on GitHub, with the local repo tracking the remote. If you have just verified that you can interact with GitHub (chapter 10) from your local computer, that test repo will be perfect. If you have just verified that you can work with GitHub from RStudio (chapter 13), that test repo will also be perfect. You may proceed when You have a test repo. You know where it lives on your local computer. Example: /home/jenny/tmp/myrepo You know where it lives on GitHub. Example: https://github.com/jennybc/myrepo You know the GitHub repo is setup as a remote. In a shell (Appendix A) working directory set to the local Git repo, enter: git remote -v Output like this confirms that fetch and push are set to remote URLs that point to your GitHub repo: origin https://github.com/jennybc/myrepo (fetch) origin https://github.com/jennybc/myrepo (push) Now enter: git branch -vv Here we confirm that the local master branch is tracking your GitHub master branch (origin/master). Gibberish? Just check that your output looks similar to mine: master b8e03e3 [origin/master] line added locally 11.2 Verify that your Git is new enough to have a credential helper In a shell (Appendix A), do: git --version and verify your version is 1.7.10 or newer. If not, update Git (chapter 7) or use SSH keys (chapter 12). 11.3 Turn on the credential helper 11.3.0.1 Windows In the shell, enter: git config --global credential.helper wincred 11.3.0.2 Windows, plan B If that doesn’t seem to work, install an external credential helper. Download the git-credential-winstore.exe application. Run it! It should work if Git is in your PATH environment variable. If not, go to the directory where you downloaded the application and run the following: git-credential-winstore -i &quot;C:\\Program Files (x86)\\Git\\bin\\git.exe&quot; 11.3.0.3 Mac Find out if the credential helper is already installed. In the shell, enter: git credential-osxkeychain And look for this output: usage: git credential-osxkeychain &lt;get|store|erase&gt; If you don’t get this output, it means you need a more recent version of Git, either via command line developer tools or Homebrew. Go back to the Mac section of chapter (7). Once you’ve confirmed you have the credential helper, enter: git config --global credential.helper osxkeychain 11.3.0.4 Linux In the shell, enter: git config --global credential.helper &#39;cache --timeout=10000000&#39; to store your password for ten million seconds or around 16 weeks, enough for a semester. 11.3.1 Trigger a username / password challenge Change a file in your local repo and commit it. Do that however you wish. Here are shell commands that will work: echo &quot;adding a line&quot; &gt;&gt; README.md git add -A git commit -m &quot;A commit from my local computer&quot; Now push! git push -u origin master One last time you will be asked for your username and password, which hopefully will be cached. Now push AGAIN. git push You should NOT be asked for your username and password, instead you should see Everything up-to-date. Rejoice and close the shell. "],
["ssh-keys.html", "Chapter 12 Set up keys for SSH 12.1 SSH keys 12.2 SSH outline and advice 12.3 Do you already have keys? 12.4 Create an SSH key pair 12.5 Provide public key to GitHub 12.6 Troubleshooting", " Chapter 12 Set up keys for SSH If you plan to push/pull using SSH, you need to set up SSH keys. You want to do this (or cache your username and password, chapter 11), so you don’t have to authenticate yourself interactively with GitHub over and over again. I suggest you set up one of these methods of authentication on each computer you want to connect to GitHub from. 12.1 SSH keys SSH keys provide a more secure way of logging into a server than using a password alone. While a password can eventually be cracked with a brute force attack, SSH keys are nearly impossible to decipher by brute force alone. Generating a key pair provides you with two long strings of characters: a public and a private key. You can place the public key on any server (like GitHub!), and then unlock it by connecting to it with a client that already has the private key (your computer!). When the two match up, the system unlocks without the need for a password. You can increase security even more by protecting the private key with a passphrase. Adapted from instructions provided by GitHub and Digital Ocean. 12.2 SSH outline and advice High level overview of what must happen: Create a public-private SSH key pair. Literally, 2 special files, in a special place. Optionally, encrypt the private key with a passphrase (best practice). Add the private key to your ssh-agent. If you protected it with a passphrase, you may have additional configuration. Add your public key to your GitHub profile. Advice: If you are new to programming and the shell, you’ll probably find HTTPS easier at first (chapter 11). You can always switch to SSH later. You can use one method from computer A and the other from computer B. You should swap out your SSH keys periodically. Something like once a year. It’s best practice to protect your private key with a passphrase. This can make setup and usage harder, so if you’re not up for that (yet), either don’t use a passphrase or seriously consider using HTTPS instead. Don’t do weird gymnastics in order to have only one key pair, re-used over multiple computers. You should probably have one key per computer (I do this). Some people even have one key per computer, per service (I do not do this). It is normal to associate multiple public keys with your GitHub account. For example, one public key for each computer you connect with. 12.3 Do you already have keys? You can check this from RStudio or from the shell. Global advice: if you do have existing keys, but have no clue where they came from or why you created them, you should seriously consider creating a new SSH key pair. It’s up to you to figure out whether/how to delete the old ones. But don’t let that keep you from creating new keys and moving forward. 12.3.1 From RStudio Go to Tools &gt; Global Options…&gt; Git/SVN. If you see something like ~/.ssh/id_rsa in the SSH RSA Key box, you definitely have existing keys. Caveat: RStudio only looks for a key pair named id_rsa and id_rsa.pub. This makes sense, because it’s the default and very common. But SSH keys can have other names. If you want to be completely certain, you should also check in the shell. 12.3.2 From the shell Go to the shell (appendix A). List existing keys: ls -al ~/.ssh/ If you are told ~/.ssh/ doesn’t exist, you don’t have SSH keys! If you see a pair of files like id_rsa.pub and id_rsa, you have a key pair already. The typical pattern is id_FOO.pub (the public key) and id_FOO (the private key). If you’re happy to stick with your existing keys, skip to the sections about adding a key to the ssh-agent and GitHub. 12.4 Create an SSH key pair 12.4.1 Option 1: Set up from RStudio Go to Tools &gt; Global Options…&gt; Git/SVN &gt; Create RSA Key…. RStudio prompts you for a passphrase. It is optional, but also a best practice. Configuring your system for smooth operation with a passphrase-protected key introduces more moving parts. If you’re completely new at all this, skip the passphrase (or use HTTPS!) and implement it next time, when you are more comfortable with system configuration. I did not use a passphrase at first, but I do now, and record it in a password manager. Click “Create” and RStudio will generate an SSH key pair, stored in the files ~/.ssh/id_rsa and ~/.ssh/id_rsa.pub. 12.4.2 Option 2: Set up from the shell Create the key pair like so, but substitute a comment that means something to you, especially if you’ll have multiple SSH keys in your life. Consider the email associated with your GitHub account or the name of your computer, e.g. you@example.com or 2018-mbp. $ ssh-keygen -t rsa -b 4096 -C &quot;USEFUL-COMMENT&quot; Accept the proposal to save the key in the default location. Just press Enter here: Enter file in which to save the key (/Users/jenny/.ssh/id_rsa): You have the option to protect the key with a passphrase. It is optional, but also a best practice. Configuring your system for smooth operation with a passphrase-protected key introduces more moving parts. If you’re completely new at all this, skip the passphrase and implement it next time, when you are more comfortable with system configuration. I did not use a passphrase at first, but I do now, and record it in a password manager. Enter passphrase (empty for no passphrase): The process should complete now and should have looked like this: jenny@2015-mbp ~ $ ssh-keygen -t rsa -b 4096 -C &quot;USEFUL-COMMENT&quot; Generating public/private rsa key pair. Enter file in which to save the key (/Users/jenny/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /Users/jenny/.ssh/id_rsa. Your public key has been saved in /Users/jenny/.ssh/id_rsa.pub. The key fingerprint is: SHA256:ki0TNHm8qIvpH7/c0qQmdv2xxhYHCwlpn3+rVhKVeDo USEFUL-COMMENT The key&#39;s randomart image is: +---[RSA 4096]----+ | o+ . . | | .=.o . + | | ..= + + | | .+* E | | .= So = | | . +. = + | | o.. = ..* . | | o ++=.o =o. | | ..o.++o.=+. | +----[SHA256]-----+ 12.4.3 Add key to ssh-agent Tell your ssh-agent about the key and, especially, set it up to manage the passphrase, if you chose to set one. Things get a little OS-specific around here. When in doubt, consult GitHub’s instructions for SSH, which is kept current for Mac, Windows, and Linux. 12.4.3.1 Mac OS Make sure ssh-agent is enabled: jenny@2015-mbp ~ $ eval &quot;$(ssh-agent -s)&quot; Agent pid 95727 Add your key. If you set a passphrase, you’ll be challenged for it here. Give it. The -K option stores your passphrase in the keychain. jenny@2015-mbp ~ $ ssh-add -K ~/.ssh/id_rsa Enter passphrase for /Users/jenny/.ssh/id_rsa: Identity added: /Users/jenny/.ssh/id_rsa (/Users/jenny/.ssh/id_rsa) If you’re using a passphrase AND on macOS Sierra 10.12.2 and higher, you need to do one more thing. Create a file ~/.ssh/config with these contents: Host * AddKeysToAgent yes UseKeychain yes This should store your passphrase persistently in the keychain. Otherwise, you will have to enter it every time you log in. Useful StackOverflow thread: How can I permanently add my SSH private key to Keychain so it is automatically available to ssh?. 12.4.3.2 Windows In a Git Bash shell, make sure ssh-agent is running: $ eval $(ssh-agent -s) Agent pid 59566 Add your key. $ ssh-add ~/.ssh/id_rsa 12.4.3.3 Linux In a shell, make sure ssh-agent is running: $ eval &quot;$(ssh-agent -s)&quot; Agent pid 59566 Add your key. ssh-add ~/.ssh/id_rsa 12.5 Provide public key to GitHub Now we store a copy of your public key on GitHub. 12.5.1 RStudio to clipboard Go to Tools &gt; Global Options…&gt; Git/SVN. If your key pair has the usual name, id_rsa.pub and id_rsa, RStudio will see it and offer to “View public key”. Do that and accept the offer to copy to your clipboard. If your key pair is named differently, use another method. 12.5.2 Shell to clipboard Copy the public key onto your clipboard. For example, open ~/.ssh/id_rsa.pub in an editor and copy the contents to your clipboard. Or do one of the following at the command line: Mac OS: pbcopy &lt; ~/.ssh/id_rsa.pub Windows: clip &lt; ~/.ssh/id_rsa.pub Linux: xclip -sel clip &lt; ~/.ssh/id_rsa.pub Linux: if needed, install via apt-get or yum. For example, sudo apt-get install xclip. 12.5.3 On GitHub Make sure you’re signed into GitHub. Click on your profile pic in upper right corner and go Settings, then SSH and GPG keys. Click “New SSH key”. Paste your public key in the “Key” box. Give it an informative title, presumably related to the comment you used abov, during key creation. For example, you might use 2018-mbp to record the year and computer. Click “Add SSH key”. In theory, we’re done! You can use ssh -T git@github.com to test your connection to GitHub. If you’re not sure what to make of the output, see the link for details. Of course, the best test is to work through the realistic usage examples elsewhere in this guide. 12.6 Troubleshooting 12.6.1 HTTPS vs SSH If you think you have SSH set up correctly and yet you are still challenged for credentials, consider this: for the repo in question, have you possibly set up GitHub, probably called origin, as an HTTPS remote, instead of SSH? How to see the remote URL(s) associated with the current repo in the shell: git remote -v An SSH remote will look like this: git@github.com:USERNAME/REPOSITORY.git whereas an HTTPS remote will look like this: https://github.com/USERNAME/REPOSITORY.git You can toggle between these with git remote set-url: https://help.github.com/articles/changing-a-remote-s-url/ 12.6.2 git2r – or some other tool – can’t find SSH keys on Windows Have you seen this error message? Error in .local(object, ...) : Error in &#39;git2r_push&#39;: error authenticating: failed connecting agent We’ve seen it when working with Git/GitHub from R via the git2r package, which is used under the hood by many R packages, such as devtools, ghit, and usethis. git2r uses the libgit2 library, not the Git you installed. This means you can have SSH keys configured properly for Git work in a Git Bash shell and from RStudio and still have problems with git2r! Ugh. The root cause is confusion about the location of .ssh/ on Windows. R’s idea of your home directory on Windows often differs from the default location of config files for Git and ssh, such as .ssh/. On *nix systems, these generally coincide and there’s no problem. Two important directories on Windows are the user’s HOME and USERPROFILE. R usually associates ~ with HOME, but Git and ssh often consult USERPROFILE for their config files. On my Windows 10 VM, I see: normalizePath(&quot;~&quot;) #&gt; [1] &quot;C:\\\\Users\\\\JennyVM\\\\Documents&quot; as.list(Sys.getenv( c(&quot;HOME&quot;, &quot;USERPROFILE&quot;) )) #&gt; $HOME #&gt; [1] &quot;C:/Users/JennyVM/Documents&quot; #&gt; #&gt; $USERPROFILE #&gt; [1] &quot;C:\\\\Users\\\\JennyVM&quot; list.files( Sys.getenv(&quot;USERPROFILE&quot;), pattern = &quot;ssh|git&quot;, include.dirs = TRUE, all.files = TRUE ) #&gt; [1] &quot;.gitconfig&quot; &quot;.ssh&quot; Two workarounds: Tell git2r explicitly where to find your public and private key. Example using usethis::use_github(): cred &lt;- git2r::cred_ssh_key( publickey = &quot;~/../.ssh/id_rsa.pub&quot;, privatekey = &quot;~/../.ssh/id_rsa&quot; ) use_github(credentials = cred) Create a symbolic link so that .ssh/ in R’s home directory points to your actual .ssh/ directory. Example contributed by Ian Lyttle on Windows 7 using Command Prompt: MKLINK /D &quot;C:\\Users\\username\\Documents\\.ssh&quot; &quot;C:\\Users\\username\\.ssh&quot; Finally, if git2r seems unable to get your SSH passphrase from ssh-agent, install the getPass package: install.packages(&quot;getPass&quot;) and git2r should launch a popup where you can enter your passphrase. Thanks to Ian Lyttle for this tip. This link provides a great explanation of the uncertainty about where .ssh/ and user’s .gitconfig are located on Windows: git on Windows - location of configuration files. Bottom line: locate where your main tool expects and create symbolic links to help other tools find this stuff. 12.6.3 Other Other things to double-check: Did you add the SSH to your ssh-agent? Did you configure Mac OS Sierra or High Sierra to persistently store your passphrase in the keychain? Did you add the public key to GitHub? "],
["rstudio-git-github.html", "Chapter 13 Connect RStudio to Git and GitHub 13.1 Prerequisites 13.2 Make a new repo on GitHub 13.3 Clone the new GitHub repository to your computer via RStudio 13.4 Make local changes, save, commit 13.5 Push your local changes online to GitHub 13.6 Confirm the local change propagated to the GitHub remote 13.7 Were you challenged for GitHub username and password? 13.8 Clean up", " Chapter 13 Connect RStudio to Git and GitHub Here we verify that RStudio can issue Git commands on your behalf. Assuming that you’ve gotten local Git to talk to GitHub, this means you’ll also be able to pull from and push to GitHub from RStudio. In later chapters and in live workshops, we revisit these operations with much more explanation. If you succeed here, your set up is DONE. 13.1 Prerequisites We assume the following: You’ve registered a free GitHub account (chapter 5). You’ve installed/updated R and RStudio (chapter 6). You’ve installed Git (chapter 7). You’ve introduced yourself to Git (chapter 8). You’ve confirmed that you can push to / pull from GitHub from the command line (chapter 10). 13.2 Make a new repo on GitHub Go to https://github.com and make sure you are logged in. Click green “New repository” button. Or, if you are on your own profile page, click on “Repositories”, then click the green “New” button. Repository name: myrepo (or whatever you wish, we will delete this) Public YES Initialize this repository with a README Click big green button “Create repository.” Copy the HTTPS clone URL to your clipboard via the green “Clone or Download” button. Or copy the SSH URL if you chose to set up SSH keys. 13.3 Clone the new GitHub repository to your computer via RStudio In RStudio, start a new Project: File &gt; New Project &gt; Version Control &gt; Git. In the “repository URL” paste the URL of your new GitHub repository. It will be something like this https://github.com/jennybc/myrepo.git. Do you NOT see an option to get the Project from Version Control? Go to chapter 14 for tips on how to help RStudio find Git. Take charge of – or at least notice! – the local directory for the Project. A common rookie mistake is to have no idea where you are saving files or what your working directory is. Pay attention. Be intentional. Personally, I would do this in ~/tmp. I suggest you check “Open in new session”, as that’s what you’ll usually do in real life. Click “Create Project”. This should download the README.md file that we created on GitHub in the previous step. Look in RStudio’s file browser pane for the README.md file. 13.4 Make local changes, save, commit From RStudio, modify the README.md file, e.g., by adding the line “This is a line from RStudio”. Save your changes. Commit these changes to your local repo. How? From RStudio: Click the “Git” tab in upper right pane. Check “Staged” box for README.md. If you’re not already in the Git pop-up, click “Commit”. Type a message in “Commit message”, such as “Commit from RStudio”. Click “Commit”. 13.5 Push your local changes online to GitHub Click the green “Push” button to send your local changes to GitHub. If you are challenged for username and password, provide them (but see below). You should see some message along these lines. [master dc671f0] blah 3 files changed, 22 insertions(+) create mode 100644 .gitignore create mode 100644 myrepo.Rproj 13.6 Confirm the local change propagated to the GitHub remote Go back to the browser. I assume we’re still viewing your new GitHub repo. Refresh. You should see the new “This is a line from RStudio” in the README. If you click on “commits,” you should see one with the message “Commit from RStudio”. If you have made it this far, you are DONE with set up. But first … 13.7 Were you challenged for GitHub username and password? If you somehow haven’t done so yet, now is the perfect time to make sure you don’t need to keep providing username and password on each push. Pick one: Credential caching for HTTPS access, chapter 11. Set up SSH keys, chapter 12. Now is the perfect time to do this, since you have a functioning test repo. 13.8 Clean up Local When you’re ready to clean up, you can delete the local repo any way you like. It’s just a regular directory on your computer. GitHub In the browser, go to your repo’s landing page on GitHub. Click on “Settings”. Scroll down, click on “delete repository,” and do as it asks. "],
["rstudio-see-git.html", "Chapter 14 Detect Git from RStudio 14.1 Do you have a problem? 14.2 Find Git yourself 14.3 Tell RStudio where to find Git", " Chapter 14 Detect Git from RStudio If you want RStudio to help with your Git and GitHub work, it must be able to find the Git executable. This often “just works”, so this page is aimed at people who have reason to suspect they have a problem. This is something you set up once-per-computer. 14.1 Do you have a problem? Let’s check if RStudio can find the Git executable. File &gt; New Project… Do you see an option to create from Version Control? If yes, good. Select New Directory &gt; Empty Project. Do you see a checkbox “Create a git repository”? If yes, good, CHECK IT. Give this disposable test project a name and click Create Project. Do you see a “Git” tab in the upper right pane, the same one that has “Environment” and “History”? If yes, good. If all looks good, you can delete this project. Looks like RStudio and Git are talking to each other. Keep reading if things don’t go so well or you want to know more. 14.2 Find Git yourself RStudio can only act as a GUI front-end for Git if Git has been successfully installed (chapter 7) AND RStudio can find it. A basic test for successful installation of Git is to simply enter git in the shell. If you get a complaint about Git not being found, it means installation was unsuccessful or that it is not being found, i.e. it is not on your PATH. If you are not sure where the Git executable lives, try this in a shell: which git (Mac, Linux) where git (most versions of Windows) 14.3 Tell RStudio where to find Git If Git appears to be installed and findable, launch RStudio. Quit and re-launch RStudio if there’s any doubt in your mind about whether you opened RStudio before or after installing Git. Don’t make me stop this car and restart RStudio for you in office hours. DO IT. From RStudio, go to Tools &gt; Global Options &gt; Git/SVN and make sure that the box Git executable points to … the Git executable. It should read something like: /usr/bin/git (Mac, Linux) C:/Program Files (x86)/Git/bin/git.exe (Windows) Here is a screenshot of someone doing this on a Windows machine. WARNING: On Windows, do NOT use C:/Program Files (x86)/Git/cmd/git.exe. bin in the path is GOOD YES! cmd in the path is BAD NO! WARNING: On Windows, do NOT use git-bash.exe. Something that ends in git.exe is GOOD YES! git-bash.exe is BAD NO! At times, we’ve had trouble navigating to the necessary directory on Mac OS, once we’ve clicked “Browse” and are working with a Finder-type window. The keyboard shortcut “command + shift + g” will summon “Go To Folder”, where you will be able to type or paste any path you want. Restart RStudio if you make any changes. Don’t make me stop this car again and restart RStudio for you in office hours. DO IT. Do the steps at the top of the page to see if RStudio and Git are communicating now. No joy? I’ve seen this help: With your Project open, go to Tools &gt; Project Options.... If available, click on “Git/SVN” and select “Git” in the Version control system dropdown menu. Answer “yes” to the “Confirm New Git Repository” pop up. Answer “yes” to the “Confirm Restart RStudio” pop up. If you installed Git via GitHub for Windows, it is possible the Git executable is really well hidden. Get our help or install Git another way. Your PATH is probably not set up correctly and/or you should re-install Git and control/notice where it’s going. Read more in 15. Get our help. "],
["troubleshooting.html", "Chapter 15 RStudio, Git, GitHub Hell 15.1 I think I have installed Git but damn if I can find it 15.2 RStudio Git pane disappears on Mac OS 15.3 Dysfunctional PATH 15.4 Push/Pull buttons greyed out in RStudio 15.5 I have no idea if my local repo and my remote repo are connected. 15.6 Push fail at the RStudio level 15.7 Push rejected, i.e. fail at the Git/GitHub level 15.8 RStudio is not making certain files available for staging/committing 15.9 I hear you have some Git repo inside your Git repo", " Chapter 15 RStudio, Git, GitHub Hell Problems we have seen and possible solutions. If you experience some new problem and, especially, find the corresponding solution, we’d love to hear from you! 15.1 I think I have installed Git but damn if I can find it When you install Git, try to control or record where it is being installed! Make a mental or physical note of these things. You may be able to find Git after the fact with these commands in the shell: which git (Mac, Linux, or anything running a bash shell) where git (Windows, when not in a bash shell) It is not entirely crazy to just re-install Git, using a method that leaves it in a more conventional location, and to pay very close attention to where it’s being installed. Live and learn. 15.2 RStudio Git pane disappears on Mac OS After a Mac OS upgrade, you might need to trigger the Xcode command line tools to prompt you for what it needs, i.e. to re-install or re-agree to the license agreement. We have seen this cause the RStudio Git pane to disappear on a system where it was previously working. Use commands like these below to tickle Xcode: xcode-select --install or git config --global --list Then restart RStudio. 15.3 Dysfunctional PATH I’m pretty sure that most cases of RStudio not automatically detecting the Git executable stem from problems with PATH. This is the set of directories where your computer will look for executables, such as Git (today) or make (later in this course). Certain methods of Git installation, especially on Windows and/or older OSes, have a higher tendency to put Git in an unconventional location or to fail to add the relevant directory to PATH. How to see your PATH? In the shell: echo $PATH Take a good hard look at this. See the point above about finding your Git executable or re-installing it while you are wide awake. Is the host directory in your PATH? No? Fix that. Go here for instructions on what to put in your .bash_profile in order to add a directory to PATH. 15.4 Push/Pull buttons greyed out in RStudio Are you sure your local repository is associated with a remote repository, e.g. a GitHub repo? In a shell with working directory set to the local Git repo, enter this command: jenny@2015-mbp myrepo $ git remote -v origin https://github.com/jennybc/myrepo (fetch) origin https://github.com/jennybc/myrepo (push) We want to see that fetch and push are set to remote URLs that point to the remote repo. Note also that the GitHub repo is a remote named origin, as far as your local repo is concerned. This is typical and, though I think github is a vastly superior name, origin is such a strong convention that I follow it. If you discover you still need to set a remote, get the HTTPS or SSH URL, as appropriate, for your GitHub repo. This is easy to get onto your clipboard from the repo’s GitHub page. Do this in the shell: git remote add origin https://github.com/jennybc/myrepo.git Download all the files from the online GitHub repository and deal with any conflicts. git pull origin master Call git remote -v again. Once you can prove that your GitHub remote is set properly, you can move on to the next step. Are you sure the current branch is tracking a branch on the remote? In that same shell, in your repo, do this: jenny@2015-mbp myrepo $ git branch -vv * master b8e03e3 [origin/master] line added locally The above shows successful confirmation that the local master branch is tracking origin/master, i.e. the master branch on GitHub. If you don’t see the [origin/master] bit, that is a problem. By the way, git branch -r is another handy way to examine your remote-tracking branches. (If you’re working with a branch other than master, adjust everything accordingly.) When connecting a local repo to a new GitHub repo, a lot of people remember to add the GitHub remote, but forget to also cement this tracking relationship for any relevant branches. If you discover your local master branch is not yet tracking master on GitHub, fix that like so: git push --set-upstream origin master This is equivalent to git push -u origin master but conveys more about what you are doing. Call git branch -vv or git branch -r again to confirm that the master branch on GitHub is the upstream or tracking branch for the local master branch. 15.5 I have no idea if my local repo and my remote repo are connected. See the above section on “Push/Pull buttons greyed out in RStudio.” 15.6 Push fail at the RStudio level Do you get this error in RStudio? error: unable to read askpass response from &#39;rpostback-askpass&#39; Open the shell: Tools &gt; Shell. git push -u origin master 15.7 Push rejected, i.e. fail at the Git/GitHub level You might have changes on the remote AND on your local repo. Just because you don’t remember making any edits in the browser doesn’t mean you didn’t. Humor me. Pull first. Resolve any conflicts. Then try your push again. 15.8 RStudio is not making certain files available for staging/committing Do you have a space in your directory or file names? A space in a file name is a space in your soul. Get rid of it. Is your Git repo / RStudio Project inside a folder that … eventually rolls up to Google Drive, DropBox, Microsoft OneDrive, or a network drive? If yes, I recommend you move the repo / Project into a plain old directory that lives directly on your computer and that is not managed by, e.g., Google Drive. If you cannot deal with the two root causes identified above, then it is possible that a more powerful Git client (chapter 9) will be able to cope with these situations. But I make no promises. You should also try Git operations from the command line. 15.9 I hear you have some Git repo inside your Git repo Do not create a Git repository inside another Git repository. Just don’t. If you have a genuine need for this, which is really rare, the proper way to do it is via submodules. In STAT 545, we certainly do not need to do this and when we’ve seen it, it’s been a mistake. This has resulted in the unexpected and complete loss of the inner Git repository. To be sure, there was more going on here (cough, GitHub Desktop client), but non-standard usage of Git repos makes it much easier to make costly mistakes. "],
["new-github-first.html", "Chapter 16 New project, GitHub first 16.1 Make a repo on GitHub 16.2 New RStudio Project via git clone 16.3 Make local changes, save, commit 16.4 Push your local changes to GitHub 16.5 Confirm the local change propagated to the GitHub remote 16.6 Make a change on GitHub 16.7 Pull from GitHub 16.8 The end", " Chapter 16 New project, GitHub first We create a new Project, with the preferred “GitHub first, then RStudio” sequence. Why do we prefer this? Because this method of copying the Project from GitHub to your computer also sets up the local Git repository for immediate pulling and pushing. Under the hood, we are doing git clone. You’ve actually done this before during set up (chapter 13). We’re doing it again, with feeling. 16.1 Make a repo on GitHub Do this once per new project. Go to https://github.com and make sure you are logged in. Click green “New repository” button. Or, if you are on your own profile page, click on “Repositories”, then click the green “New” button. Repository name: myrepo (or whatever you wish) Public YES Initialize this repository with a README Click the big green button “Create repository.” Copy the HTTPS clone URL to your clipboard via the green “Clone or Download” button. Or copy the SSH URL if you chose to set up SSH keys. 16.2 New RStudio Project via git clone In RStudio, start a new Project: File &gt; New Project &gt; Version Control &gt; Git. In the “repository URL” paste the URL of your new GitHub repository. It will be something like this https://github.com/jennybc/myrepo.git. Be intentional about where you create this Project. Suggest you “Open in new session”. Click “Create Project” to create a new directory, which will be all of these things: a directory or “folder” on your computer a Git repository, linked to a remote GitHub repository an RStudio Project In the absence of other constraints, I suggest that all of your R projects have exactly this set-up. This should download the README.md file that we created on GitHub in the previous step. Look in RStudio’s file browser pane for the README.md file. There’s a big advantage to the “GitHub first, then RStudio” workflow: the remote GitHub repo is added as a remote for your local repo and your local master branch is now tracking master on GitHub. This is a technical but important point about Git. The practical implication is that you are now set up to push and pull. No need to fanny around setting up Git remotes and tracking branches on the command line. 16.2.1 Optional: peek under the hood Completely optional activity: use command line Git to see what we’re talking about above, i.e. the remote and tracking branch setup. git remote -vor git remote --verbose shows the remotes you have setup. Here’s how that looks for someone using SSH with GitHub and calling it origin (a convention I hate but am resigned to): $ git remote -v origin git@github.com:jennybc/myrepo.git (fetch) origin git@github.com:jennybc/myrepo.git (push) git branch -vv prints info about the current branch. In particular, we can see that local master is tracking the master branch on origin, a.k.a. origin/master. $ git branch -vv * master 7c98308 [origin/master] Initial commit git clone, which RStudio did for us, sets all of this up automatically. This is why “GitHub first, then RStudio” is the preferred way to start projects early in your Git/GitHub life. 16.3 Make local changes, save, commit Do this every time you finish a valuable chunk of work, probably many times a day. From RStudio, modify the README.md file, e.g., by adding the line “This is a line from RStudio”. Save your changes. Commit these changes to your local repo. How? Click the “Git” tab in upper right pane Check “Staged” box for any files whose existence or modifications you want to commit. To see more detail on what’s changed in file since the last commit, click on “Diff” for a Git pop-up If you’re not already in the Git pop-up, click “Commit” Type a message in “Commit message”, such as “Commit from RStudio”. Click “Commit” 16.4 Push your local changes to GitHub Do this a few times a day, but possibly less often than you commit. You have new work in your local Git repository, but the changes are not online yet. This will seem counterintuitive, but first let’s stop and pull from GitHub. Why? Establish this habit for the future! If you make changes to the repo in the browser or from another machine or (one day) a collaborator has pushed, you will be happier if you pull those changes in before you attempt to push. Click the blue “Pull” button in the “Git” tab in RStudio. I doubt anything will happen, i.e. you’ll get the message “Already up-to-date.” This is just to establish a habit. Click the green “Push” button to send your local changes to GitHub. You should see some message along these lines. [master dc671f0] blah 3 files changed, 22 insertions(+) create mode 100644 .gitignore create mode 100644 myrepo.Rproj 16.5 Confirm the local change propagated to the GitHub remote Go back to the browser. I assume we’re still viewing your new GitHub repo. Refresh. You should see the new “This is a line from RStudio” in the README. If you click on “commits,” you should see one with the message “Commit from RStudio”. 16.6 Make a change on GitHub Click on README.md in the file listing on GitHub. In the upper right corner, click on the pencil for “Edit this file”. Add a line to this file, such as “Line added from GitHub.” Edit the commit message in “Commit changes” or accept the default. Click the big green button “Commit changes.” 16.7 Pull from GitHub Back in RStudio locally … Inspect your README.md. It should NOT have the line “Line added from GitHub”. It should be as you left it. Verify that. Click the blue Pull button. Look at README.md again. You should now see the new line there. 16.8 The end Now just … repeat. Do work somewhere. Commit it. Push it or pull it* depending on where you did it, but get local and remote “synced up”. Repeat. * Note that in general (and especially in future when collaborating with other developers) you will usually need to pull changes from the remote (GitHub) before pushing the local changes you have made. For this reason, it’s a good idea to try and get into the habit of pulling before you attempt to push. "],
["existing-github-first.html", "Chapter 17 Existing project, GitHub first 17.1 Make a repo on GitHub 17.2 New RStudio Project via git clone 17.3 Bring your existing project over 17.4 Stage and commit 17.5 Push your local changes to GitHub 17.6 Confirm the local change propagated to the GitHub remote 17.7 The end", " Chapter 17 Existing project, GitHub first A novice-friendly workflow for bringing an existing R project into the RStudio and Git/GitHub universe. We do this in a slightly awkward way, in order to avoid using Git at the command line. You won’t want to work this way forever, but it’s perfectly fine as you’re getting started! We assume you’ve got your existing R project isolated in a directory on your computer. If that’s not already true, make it so. Create a directory and marshal all the existing data and R scripts there. It doesn’t really matter where you do this, but note where the project currently lives. 17.1 Make a repo on GitHub Go to https://github.com and make sure you are logged in. Click the green “New repository” button. Or, if you are on your own profile page, click on “Repositories”, then click the green “New” button. Pick a repository name that actually reminds you what the project is about! But try to be concise. Public YES Initialize this repository with a README Click the big green button “Create repository.” Copy the HTTPS clone URL to your clipboard via the green “Clone or Download” button. Or copy the SSH URL if you chose to set up SSH keys. 17.2 New RStudio Project via git clone In RStudio, start a new Project: File &gt; New Project &gt; Version Control &gt; Git. In the “repository URL” paste the URL of your new GitHub repository. It will be something like this https://github.com/jennybc/myrepo.git. Be intentional about where you create this Project. Suggest you “Open in new session”. Click “Create Project” to create a new directory, which will be all of these things: a directory or “folder” on your computer a Git repository, linked to a remote GitHub repository an RStudio Project This should download the README.md file that we created on GitHub in the previous step. Look in RStudio’s file browser pane for the README.md file. 17.3 Bring your existing project over Using your favorite method of moving or copying files, copy the files that constitute your existing project into the directory for this new project. In RStudio, consult the Git pane and the file browser. Are you seeing all the files? They should be here if your move/copy was successful. Are they showing up in the Git pane with questions marks? They should be appearing as new untracked files. 17.4 Stage and commit Commit your files to this repo. How? Click the “Git” tab in upper right pane Check “Staged” box for all files you want to commit. Default: stage it. When to reconsider: this will all go to GitHub. So do consider if that is appropriate for each file. You can absolutely keep a file locally, without committing it to the Git repo and sending to GitHub. Just let it sit there in your Git pane, without being staged. No harm will be done. If this is a long-term situation, list the file in .gitignore. If you’re not already in the Git pop-up, click “Commit” Type a message in “Commit message”, such as “init”. Click “Commit” 17.5 Push your local changes to GitHub Click the green “Push” button to send your local changes to GitHub. You should see some message along these lines. [master dc671f0] blah 3 files changed, 22 insertions(+) create mode 100644 .gitignore create mode 100644 myrepo.Rproj 17.6 Confirm the local change propagated to the GitHub remote Go back to the browser. I assume we’re still viewing your new GitHub repo. Refresh. You should see all the project files you committed there. If you click on “commits,” you should see one with the message “init”. 17.7 The end Now just … repeat. Do work somewhere. Commit it. Push it or pull it* depending on where you did it, but get local and remote “synced up”. Repeat. * Note that in general (and especially in future when collaborating with other developers) you will usually need to pull changes from the remote (GitHub) before pushing the local changes you have made. For this reason, it’s a good idea to try and get into the habit of pulling before you attempt to push. "],
["existing-github-last.html", "Chapter 18 Existing project, GitHub last 18.1 Make or verify an RStudio Project 18.2 Make or verify a Git repo 18.3 Stage and commit 18.4 Make and connect a GitHub repo, option 1 18.5 Make and connect a GitHub repo, option 2 18.6 Confirm the local files propagated to the GitHub remote 18.7 The end", " Chapter 18 Existing project, GitHub last An explicit workflow for connecting an existing local R project to GitHub, when for some reason you cannot or don’t want to do a “GitHub first” workflow (see chapters 16 and 17). When does this come up? Example: it’s an existing project that is already a Git repo with a history you care about. Then you have to do this properly. This is less desirable for a novice because there are more opportunities to get confused and make a mistake. RStudio and the usethis package are gradually making this easier, so you can avoid working with Git in the shell. But command line Git remains a viable option. All are covered below. 18.1 Make or verify an RStudio Project We assume you’ve got your existing R project isolated in a directory on your computer. If it’s not already an RStudio Project, make it so: If you use the usethis package, set the existing directory as the current project with proj_set(), then do usethis::use_rstudio(). Within RStudio you can do: File &gt; New Project &gt; Existing Directory and, if you wish, “Open in new session”. If your project is already an RStudio Project, launch it. 18.2 Make or verify a Git repo You should be in RStudio now, in your project. Is it already a Git repository? The presence of the Git pane should tip you off. If yes, you’re done. If not, you have several options: If you have the usethis package, call usethis::use_git(). In RStudio, go to Tools &gt; Project Options … &gt; Git/SVN. Under “Version control system”, select “Git”. Confirm New Git Repository? Yes! In the shell, in Project’s directory, do git init. If you used RStudio or usethis, the Project should re-launch in RStudio. Do that yourself if you did git init. RStudio should now have a Git pane. 18.3 Stage and commit If your local project was already a Git repo and was up-to-date, move on. Otherwise, you probably need to stage and commit. Click the “Git” tab in upper right pane Check “Staged” box for all files you want to commit. Default: stage everything When to do otherwise: this will all go to GitHub. So consider if that is appropriate for each file. You can absolutely keep a file locally, without committing it to the Git repo and sending to GitHub. Just let it sit there in your Git pane, without being staged. No harm will be done. If this is a long-term situation, list the file in .gitignore. If you’re not already in the Git pop-up, click “Commit” Type a message in “Commit message”. Click “Commit” 18.4 Make and connect a GitHub repo, option 1 If you use the usethis package AND you have configured a GitHub Personal Access Token (PAT) (see the appendix for how to set this up.), do this in R: usethis::use_github() This will create a new repo on GitHub, add it as a remote, set up a tracking branch, and open it in your browser. Read the use_github() help to learn about its arguments and advice on configuring a PAT. This is extremely handy for a variety of workflows that call the GitHub API. Consider setting this up if you use usethis, devtools, or gh regularly. 18.5 Make and connect a GitHub repo, option 2 18.5.1 Make a new repo on GitHub Go to https://github.com and make sure you are logged in. Click the green “New repository” button. Or, if you are on your own profile page, click on “Repositories”, then click the green “New” button. Pick a repository name – it should probably match the name of your local Project and directory. Why confuse yourself? Public or private, as appropriate and possible DO NOT initialize this repository with a README. Click the big green button “Create repository.” Copy the HTTPS clone URL to your clipboard via the green “Clone or Download” button. Or copy the SSH URL if you chose to set up SSH keys. 18.5.2 Connect local repo to GitHub repo You can do this in the shell or, with recent versions of RStudio, via RStudio. 18.5.3 In RStudio Click on the “two purple boxes and a white square” in the Git pane. Click “Add remote”. Paste the URL here and pick a remote name, almost certainly origin. Now “Add”. We should be back in the “New Branch” dialog (if not, click on the “two purple boxes and a white square” in the Git pane again). I assume you’re on the master branch want it to track master on GitHub. Enter master as the branch name and make sure “Sync branch with remote” is checked. Click “Create” (yes, even though the branch already exists). In the next dialog, choose “overwrite”. 18.5.4 In the shell In a shell, do this, substituting your URL: git remote add origin https://github.com/jennybc/myrepo.git Push and cement the tracking relationship between your local master branch and master on GitHub: git push --set-upstream origin master 18.6 Confirm the local files propagated to the GitHub remote Go back to the browser. I assume we’re still viewing your new GitHub repo. Refresh. You should see all the project files you committed there. If this project already had a Git history, it should be reflected on GitHub. 18.7 The end Now just … repeat. Do work somewhere. Commit it. Push it or pull it depending on where you did it, but get local and remote “synced up”. Repeat. Note that in general (and especially in future when collaborating with other developers) you will usually need to pull changes from the remote (GitHub) before pushing the local changes you have made. For this reason, it’s a good idea to try and get into the habit of pulling before you attempt to push. "],
["rmd-test-drive.html", "Chapter 19 Test drive R Markdown 19.1 Hello World 19.2 Push to GitHub 19.3 Output format 19.4 Push to GitHub 19.5 Put your stamp on it 19.6 Develop your report 19.7 Publish your report 19.8 HTML on GitHub 19.9 Troubleshooting", " Chapter 19 Test drive R Markdown We will author an R Markdown document and render it to HTML. We discuss how to keep the intermediate Markdown file, the figures, and what to commit to Git and push to GitHub. If GitHub is the primary venue, we render directly to GitHub-flavored markdown and never create HTML. Here is the official R Markdown documentation: http://rmarkdown.rstudio.com 19.1 Hello World We’ll practice with RStudio’s boilerplate R Markdown document. Launch RStudio in a Project that is a Git repo that is connected to a GitHub repo. We are modelling “walk before you run” here. It is best to increase complexity in small increments. We test our system’s ability to render the “hello world” of R Markdown documents before we muddy the waters with our own, probably buggy, documents. Do this: File &gt; New File &gt; R Markdown … Give it an informative title. This will appear in the document but does not necessarily have anything to do with the file’s name. But the title and filename should be related! Why confuse yourself? The title is for human eyeballs, so it can contain spaces and punctuation. The filename is for humans and computers, so it should have similar words in it but no spaces and no punctuation. Accept the default Author or edit if you wish. Accept the default output format of HTML. Click OK. Save this document to a reasonable filename and location. The filename should end in .Rmd or .rmd. Save in the top-level of this RStudio project and Git repository, that is also current working directory. Trust me on this and do this for a while. You might want to commit here. So you can see what’s about to change … Click on “Knit HTML” or do File &gt; Knit Document. RStudio should display a preview of the resulting HTML. Also look at the file browser. You should see the R Markdown document, i.e. foo.Rmd AND the resulting HTML foo.html. Congratulations, you’ve just made your first reproducible report with R Markdown. You might want to commit here. 19.2 Push to GitHub Push the current state to GitHub. Go visit it in the browser. Do you see the new files? An R Markdown document and the associated HTML? Visit both in the browser. Verify this: Rmd is quite readable. But the output is obviously not there. HTML is ugly. 19.3 Output format Do you really want HTML? Do you only want HTML? If so, you can skip this step! The magical process that turns your R Markdown to HTML is like so: foo.Rmd --&gt; foo.md --&gt; foo.html. Note the intermediate markdown, foo.md. By default RStudio discards this, but you might want to hold on to that markdown. Why? GitHub gives very special treatment to markdown files. They are rendered in an almost HTML-like way. This is great because it preserves all the charms of plain text but gives you a pseudo-webpage for free when you visit the file in the browser. In contrast, HTML is rendered as plain text on GitHub and you’ll have to take special measures to see it the way you want. In many cases, you only want the markdown. In that case, we switch the output format to github_document. This means render will be foo.Rmd --&gt; foo.md, where foo.md is GitHub-flavored markdown. If you still want the HTML but also the intermediate markdown, there’s a way to request that too. Output format is one of the many things we can control in the YAML frontmatter – the text at the top of your file between leading and trailing lines of ---. You can make some changes via the RStudio IDE: click on the “gear” in the top bar of the source editor, near the “Knit HTML” button. Select “Output options” and go to the Advanced tab and check “Keep markdown source file.” Your YAML should now look more like this: --- title: &quot;Something fascinating&quot; author: &quot;Jenny Bryan&quot; date: &quot;2018-12-30&quot; output: html_document: keep_md: true --- You should have gained the line keep_md: true. You can also simply edit the file yourself to achieve this. In fact this hand-edit is necessary if you want to keep only markdown and get GitHub-flavored markdown. In that case, make your YAML look like this: --- title: &quot;Something fascinating&quot; author: &quot;Jenny Bryan&quot; date: &quot;2018-12-30&quot; output: github_document --- Save! You might want to commit here. Render via “Knit HTML” button. Now revisit the file browser. In addition to foo.Rmd, you should now see foo.md. If there are R chunks that make figures, the usage of markdown output formats will also cause those figure files to be left behind in a sensibly named sub-directory, foo_files. If you commit and push foo.md and everything inside foo_files, then anyone with permission to view your GitHub repo can see a decent-looking version of your report. If your output format is html_document, you should still see foo.html. If your output format is github_document and you see foo.html, that’s leftover from earlier experiments. Delete that. It will only confuse you later. You might want to commit here. 19.4 Push to GitHub Push the current state to GitHub. Go visit it in the browser. Do you see the modifications and new file(s)? Your Rmd should be modified (the YAML frontmatter changed). And you should have gained at least, the associated markdown file. Visit the markdown file and compare to our previous HTML. Do you see how the markdown is much more useful on GitHub? Internalize that. 19.5 Put your stamp on it Select everything but the YAML frontmatter and … delete it! Write a single English sentence. Insert an empty R chunk, via the “Chunk” menu in upper right of source editor or with corresponding keyboard shortcut. ```{r} ## insert your brilliant WORKING code here ``` Insert 1 to 3 lines of functioning code that begin the task at hand. “Walk through” and run those lines using the “Run” button or the corresponding keyboard shortcut. You MUST make sure your code actually works! Satisfied? Save! You might want to commit here. Now render the whole document via “Knit HTML.” Voilà! You might want to commit here. 19.6 Develop your report In this incremental manner, develop your report. Add code to this chunk. Refine it. Add new chunks. Go crazy! But keep running the code “manually” to make sure it works. If it doesn’t work with you babysitting it, I can guarantee you it will fail, in a more spectacular and cryptic way, when run at arms-length via “Knit HTML” or rmarkdown::render(). Clean out your workspace and restart R and re-run everything periodically, if things get weird. There are lots of chunk menu items and keyboard shortcuts to accelerate this workflow. Render the whole document often to catch errors when they’re easy to pinpoint and fix. Save often and commit every time you reach a point that you’d like as a “fall back” position. You’ll develop your own mojo soon, but this should give you your first successful R Markdown experience. 19.7 Publish your report If you’ve been making HTML, you can put that up on the web somewhere, email to your collaborator, whatever. No matter what, technically you can publish this report merely by pushing a rendered version to GitHub. However, certain practices make this effort at publishing more satisfying for your audience. Here are two behaviors I find very frustrating: “Here is my code. Behold.” This is when someone only pushes their source, i.e. R Markdown or R code AND they want other people to look at their “product”. The implicit assumption is that target audience will download code and run it. Sometimes the potential payoff simply does not justify this effort. “Here is my HTML. Behold.” This is when someone doesn’t bother to edit the default output format and accepts HTML only. What am I supposed to do with HTML on GitHub? Creating, committing, and pushing markdown is a very functional, lighweight publishing strategy. Use output: github_document or keep_md: true if output is html_document. In both cases, it is critical to also commit and push everything inside foo_files. Now people can visit and consume your work like any other webpage. This is (sort of) another example of keeping things machine- and human-readable, which is bliss. By making foo.Rmd available, others can see and run your actual code. By sharing foo.md and/or foo.html, others can casually browse your end product and decide if they even want to bother. 19.8 HTML on GitHub HTML files, such as foo.html, are not immediately useful on GitHub (though your local versions are easily viewable). Visit one and you’ll see the raw HTML. Yuck. But there are ways to get a preview: such as https://rawgit.com or http://htmlpreview.github.io. Expect much pain with HTML files inside private repos (hence the recommendations above to emphasize markdown). When it becomes vital for the whole world to see proper HTML in its full glory, it’s time to use a more sophisticated web publishing strategy. I have more general ideas about how to make a GitHub repo function as a website. 19.9 Troubleshooting Make sure RStudio and the rmarkdown package (and its dependencies) are up-to-date. In case of catastrophic failure to render the boilerplate R Markdown document, consider that your software may be too old. Details on the system used to render this document and how to check your setup: rmarkdown version 1.11. Use packageVersion(&quot;rmarkdown&quot;) to check yours. R version 3.5.1 (2018-12-12). Use R.version.string to check yours. RStudio IDE 1.1.383. Use RStudio &gt; About RStudio to check yours. Get rid of your .Rprofile, at least temporarily. I have found that a “mature” .Rprofile that has accumulated haphazardly over the years can cause trouble. Specifically, if you’ve got anything in there relating to knitr, markdown, rmarkdown and RStudio itself, it may be preventing the installation or usage of the most recent goodies. Comment the whole file out or rename it something else and relaunch or even re-install RStudio. “I have ignored your advice and dumped a bunch of code in at once. Now my Rmd does not render.” If you can’t figure out what’s wrong by reading the error messages, pick one: Back out of these changes, get back to a functional state (possibly with no code), and restore them gradually. Run your code interactively to make sure it works. Render the entire document frequently. Commit after each successful addition! When you re-introduce the broken code, now it will be part of a small change and the root problem will be much easier to pinpoint and fix. Tell knitr to soldier on, even in the presence of errors. Some problems are easier to diagnose if you can execute specific R statements during rendering and leave more evidence behind for forensic examination. Insert this chunk near the top of your .Rmd document: ```{r setup, include = FALSE, cache = FALSE} knitr::opts_chunk$set(error = TRUE) ``` If it’s undesirable to globally accept errors, you can still do this for a specific chunk like so: ```{r wing-and-a-prayer, error = TRUE} ## your sketchy code goes here ;) ``` Adapt the “git bisect” strategy: Put knitr::knit_exit() somewhere early in your .Rmd document, either in inline R code or in a chunk. Keep moving it earlier until things work. Now move it down in the document. Eventually you’ll be able to narrow down the location of your broken code well enough to find the line(s) and fix it. Check your working directory. It’s going to break your heart as you learn how often your mistakes are really mundane and basic. Ask me how I know. When things go wrong consider: What is the working directory? Is that file I want to read/write actually where I think it is? Drop these commands into R chunks to check the above: getwd() will display working directory at run time. If you monkeyed around with working directory with, e.g., the mouse, maybe it’s set to one place for your interactive development and another when “Knit HTML” takes over? list.files() will list the files in working directory. Is the file you want even there? Don’t try to change working directory within an R Markdown document. Just don’t. See knitr FAQ #5. That is all. Don’t be in a hurry to create a complicated sub-directory structure. RStudio/knitr/rmarkdown (which bring you the “Knit HTML” button) are rather opinionated about the working directory being set to the .Rmd file’s location and about all files living together in one big happy directory. This can all be worked around. For example, I recommend the here package for building file paths, once you require sub-directories. But don’t do this until you really need it. "],
["r-test-drive.html", "Chapter 20 Render an R script 20.1 Morph R Markdown into a renderable R script 20.2 Write a render-ready R script", " Chapter 20 Render an R script An underappreciated fact is that much of what you can do with R Markdown, you can also do with an R script. If you’re in analysis mode and want a report as a side effect, write an R script. If you’re writing a report with a lot of R code in it, write Rmd. In either case, render to markdown and/or HTML to communicate with other human beings. In R markdown, prose is top-level and code is tucked into chunks. In R scripts, code is top-level and prose is tucked into comments. You will use #' to request that certain comments appear as top-level prose in the rendered output. You will continue to specify things like the output format via YAML at the top of the file. This will need to be commented with #'. 20.1 Morph R Markdown into a renderable R script Get yourself a working R Markdown file, such as the one you made in your Rmd test drive. Or use the boilerplate Rmd document RStudio makes with File &gt; New File &gt; R Markdown …. Save the file as foo.R, as opposed to foo.Rmd. Yes, for a brief moment, you will have R Markdown saved as an R script, but that won’t be true for long. Transform the Rmd to R: Anything that’s not R code? Like the YAML and the English prose? Protect it with roxygen-style comments: start each line with #'. Anything that’s R code? Let it exist “as is” as top-level code. That means you’ll need to change the syntax of R chunk headers like so: Before: ```{r setup, include = FALSE} After: #+ r setup, include = FALSE Replace the leading backticks and opening curly brace with #+. Delete the trailing curly brace. Delete the 3 backticks that end each chunk. Render the R script through one of these methods: Click on the “notebook” icon in RStudio to “Compile Report”. In RStudio, do File &gt; Knit Document. In R, do rmarkdown::render(&quot;foo.R&quot;). You’ll get a markdown and/or HTML report, just as with R Markdown. If you’re having trouble making all the necessary changes and you’re frustrated, see below for an example you can copy and paste. All the workflow tips from the Rmd test drive apply here: when you script an analysis, render it to markdown, commit the .R, the .md, any associated figures, and push to GitHub. Collaborators can see your code but also browse the result without running it. This makes the current state of your analysis accessible to someone who does not even run R or who wants to take a quick look at things from a cell phone or while on vacation. 20.2 Write a render-ready R script Instead of morphing an R Markdown file, let’s create a render-ready R script directly. Create a new R script and copy/paste this code into it. #&#39; Here&#39;s some prose in a very special comment. Let&#39;s summarize the built-in #&#39; dataset `VADeaths`. ## here is a regular code comment, that will remain as such summary(VADeaths) #&#39; Here&#39;s some more prose. I can use usual markdown syntax to make things #&#39; **bold** or *italics*. Let&#39;s use an example from the `dotchart()` help to #&#39; make a Cleveland dot plot from the `VADeaths` data. I even bother to name #&#39; this chunk, so the resulting PNG has a decent name. #+ dotchart dotchart(VADeaths, main = &quot;Death Rates in Virginia - 1940&quot;) Render the R script through one of these methods: Click on the “notebook” icon in RStudio to “Compile Report”. In RStudio, do File &gt; Knit Document. In R, do rmarkdown::render(&quot;YOURSCRIPT.R&quot;). Revel in your attractive looking report with almost zero effort! Seriously, all you had to do was think about when to use special comments #' in order to promote that to nicely rendered text. Drawing on the workflow tips in Rmd test drive, let’s add some YAML frontmatter, properly commented with #', and request the github_document. Here’s the whole script again: #&#39; --- #&#39; title: &quot;R scripts can be rendered!&quot; #&#39; author: &quot;Jenny Bryan&quot; #&#39; date: &quot;April 1, 2014&quot; #&#39; output: github_document #&#39; --- #&#39; #&#39; Here&#39;s some prose in a very special comment. Let&#39;s summarize the built-in #&#39; dataset `VADeaths`. ## here is a regular code comment, that will remain as such summary(VADeaths) #&#39; Here&#39;s some more prose. I can use usual markdown syntax to make things #&#39; **bold** or *italics*. Let&#39;s use an example from the `dotchart()` help to #&#39; make a Cleveland dot plot from the `VADeaths` data. I even bother to name #&#39; this chunk, so the resulting PNG has a decent name. #+ dotchart dotchart(VADeaths, main = &quot;Death Rates in Virginia - 1940&quot;) Behind the scenes here we have used rmarkdown::render() to render this script and you can go visit it on GitHub. "],
["usage-git-cmds.html", "Chapter 21 Git commands", " Chapter 21 Git commands Here’s a start on the various Git commands that have been largely going on under the hood. We’ve tried to pick workflows that have RStudio doing this for us. But all of this can be done from the command line. Unless you use the GitHub API, most of the GitHub bits really have to be done from the browser. New local git repo from a repo on GitHub: git clone https://github.com/jennybc/happy-git-with-r.git Check the remote was cloned successfully: git remote --verbose Stage local changes, commit: git add foo.txt git commit --message &quot;A commit message&quot; Check on the state of the Git world: git status git log git log --oneline Compare versions: git diff Add a remote to existing local repo: git remote add origin https://github.com/jennybc/happy-git-with-r git remote --verbose git remote show origin Push local master to GitHub master and have local master track master on GitHub: git push --set-upstream origin master ## shorter form git push -u origin master ## you only need to set upstream tracking once! Regular push: git push ## the above usually implies (and certainly does in our tutorial) git push origin master ## git push [remote-name] [branch-name] Pull commits from GitHub: git pull Pull commits and don’t let it put you in a merge conflict pickle: git pull --ff-only Fetch commits git fetch Switch to a branch git checkout [branch-name] Checking remote and branch tracking git remote -v git branch -vv "],
["branches.html", "Chapter 22 Branches 22.1 Create a new branch 22.2 Switching branches 22.3 Merging a branch 22.4 Dealing with conflicts", " Chapter 22 Branches Branching means that you take a detour from the main stream of development and do work without changing the main stream. It allows one or many people to work in parallel without overwriting each other’s work. Branching in git is very lightweight, which means creating a branch and switching between branches is nearly instantaneous. This means git encourages workflows which create small branches for exploration or new features, often merging them back together quickly. 22.1 Create a new branch You can create a new branch with git branch, then checkout the branch with git checkout. To distinguish it from the main stream of development, presumably on master, we’ll call this a “feature branch”. git branch issue-5 git checkout issue-5 You can also use the shortcut git checkout -b issue-5 to create and checkout the branch all at once. Once you have switched to a branch, you can commit to it as usual. 22.2 Switching branches You use git checkout to switch between branches. But what do you do if you are working on a branch and need to switch, but the work on the current branch is not complete? One option is the Git stash, but generally a better option is to safeguard the current state with a temporary commit. Here I use “WIP” as the commit message to indicate work in progress. git commit --all -m &quot;WIP&quot; git checkout master Then when you come back to the branch and continue your work, you need to undo the temporary commit by resetting your state. Specifically, we want a mixed reset. This is “working directory safe”, i.e. it does not affect the state of any files. But it does peel off the temporary WIP commit. Below, the reference HEAD^ says to roll the commit state back to the parent of the current commit (HEAD). git checkout issue-5 git reset HEAD^ If this is difficult to remember, or to roll the commit state back to a different previous state, the reference can also be given as the SHA of a specific commit, which you can see via git log. 22.3 Merging a branch Once you have done your work and committed it to the feature branch, you can switch back to master and merge the feature branch. git checkout master git merge issue-5 22.4 Dealing with conflicts Most of the time, the merge will go smoothly. However if both the branches you are merging changed the same part of the same file you will get a merge conflict. git merge issue-5 # Auto-merging index.html # CONFLICT (content): Merge conflict in index.html # Automatic merge failed; fix conflicts and then commit the result. The first thing to do is NOT PANIC. Merge conflicts are not the end of the world and most are relatively small and straightforward to resolve. The first step to solving a merge conflict is determining which files are in conflict, which you can do with git status: git status # On branch master # You have unmerged paths. # (fix conflicts and run &quot;git commit&quot;) # # Unmerged paths: # (use &quot;git add &lt;file&gt;...&quot; to mark resolution) # # both modified: index.html # # no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;) So this shows only index.html is unmerged and needs to be resolved. We can then open the file to see what lines are in conflict. &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:index.html &lt;div id=&quot;footer&quot;&gt;contact : email.support@github.com&lt;/div&gt; ======= &lt;div id=&quot;footer&quot;&gt; please contact us at support@github.com &lt;/div&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; issue-5:index.html In this conflict, the lines between &lt;&lt;&lt;&lt;&lt;&lt; HEAD:index.html and ====== are the content from the branch you are currently on. The lines between ======= and &gt;&gt;&gt;&gt;&gt;&gt;&gt; issue-5:index.html are from the feature branch we are merging. To resolve the conflict, edit this section until it reflects the state you want in the merged result. Pick one version or the other or create a hybrid. Also remove the conflict markers &lt;&lt;&lt;&lt;&lt;&lt;, ====== and &gt;&gt;&gt;&gt;&gt;&gt;. &lt;div id=&quot;footer&quot;&gt; please contact us at email.support@github.com &lt;/div&gt; Now run git add index.html and git commit to finalize the merge. CONFLICTS RESOLVED. 22.4.1 Bailing out If, during the merge, you get confused about the state of things or make a mistake, use git merge --abort to abort the merge and go back to the state prior to running git merge. Then you can try to complete the merge again. Git Basic Branching and Merging: https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging "],
["remotes.html", "Chapter 23 Remotes 23.1 Listing what remotes exist 23.2 Adding a new remote 23.3 Fetching data from remotes 23.4 Pushing to remotes 23.5 Renaming and changing remotes 23.6 Upstream tracking branches", " Chapter 23 Remotes Remote repositories are versions of your project that are hosted on the Internet or another network. A single project can have 1, 2 or even hundreds of remotes. You pull others changes from remotes and push your changes to remotes. 23.1 Listing what remotes exist git remote lists the names of available remotes, but usually it is more useful to see what URLs each note corresponds to (with -v). git remote -v ## origin https://github.com/jennybc/happy-git-with-r.git (fetch) ## origin https://github.com/jennybc/happy-git-with-r.git (push) 23.2 Adding a new remote git clone automatically adds a new remote, so often you do not need to do this manually initially. However, after the initial clone, it is often useful to add additional remotes. Use git remote add to add a new remote git remote add happygit https://github.com/jennybc/happy-git-with-r.git Note: when you add a remote you give it a nickname (here happygit), which you can use in git commands in place of the entire URL. git fetch happygit Sidebar on nicknames: there is a strong convention to use origin as the nickname of your main remote. At this point, it is common for the main remote of a repo to be hosted on GitHub (or GitLab or Bitbucket). It is tempting to use a more descriptive nickname (such as github), but you might find that following convention is worth it. It makes your setup easier for others to understand and for you to transfer information that you read in documentation, on Stack Overflow, or in blogs. A common reason to add a second remote is when you have done a “fork and clone” of a repo and your personal copy is set up as the origin remote. Eventually you will want to pull changes from the original repository. It is common to use upstream as the nickname for this remote. 23.3 Fetching data from remotes To get new data from a remote use git fetch &lt;remote_name&gt;. This retrieves the data locally, but importantly it does not change the state of your repository or your files in any way. To incorporate the data into your repository, you need to merge or rebase your project with the remote project. # Fetch the data git fetch happygit # Now merge it with our local master git merge happygit/master master # git pull is a shortcut which does the above in one command git pull happygit master For more detail on git pull workflows, see 24. 23.4 Pushing to remotes Use git push &lt;remote&gt; &lt;branch&gt; to push your local changes to the &lt;branch&gt; branch on the &lt;remote&gt; remote. # push my local changes to the origin remote&#39;s master branch git push origin master # push my local changes to the happygit remote&#39;s test branch git push happygit test 23.5 Renaming and changing remotes git remote rename can be used to rename a remote git remote rename happygit hg git remote set-url can be used to change the URL for a remote. This is sometimes useful if you initially set up a remote using https, but now want to use the SSH URL instead (or vise versa). git remote set-url happygit git@github.com:jennybc/happy-git-with-r.git One fairly common workflow is you initially cloned a repository on GitHub locally (without forking it), but now want to create your own fork and push changes to it. As described earlier, it is common to call the main repository upstream and to call your fork origin. So, in this case, you need to first rename the existing remote (from origin to upstream). Then add your fork as a new remote, with the name origin. git remote rename origin upstream git remote add origin git@github.com:jimhester/happy-git-with-r.git 23.6 Upstream tracking branches It is possible to set the branch on the remote each of your local remotes corresponds to. git clone sets this up automatically, so for your own master branch this is not something you will run into. However by default if you create a new branch and try to push to it you will see something like this. git checkout -b mybranch git push # fatal: The current branch foo has no upstream branch. # To push the current branch and set the remote as upstream, use # # git push --set-upstream origin foo You can do as the error message says and explicitly set the upstream branch with --set-upstream. However I would recommend instead changing the default behavior of push to automatically set the upstream branch to the branch with the same name on the remote. You can do this by changing the git push.default option to current. git config --global push.default current See also Working with Remotes: https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes "],
["pull-tricky.html", "Chapter 24 Pull, but you have local work 24.1 Local work is uncommitted 24.2 Local work is committed 24.3 Other approaches 24.4 Some local work is committed, some is not", " Chapter 24 Pull, but you have local work Problem: You want to pull changes from upstream, but you have done some new work locally since the last time you pulled. This often comes up because what you actually want to do is push, but Git won’t let you until you first incorporate the upstream changes. For the sake of simplicity, assume we’re dealing with the master branch and the upstream remote is called origin. Recent commit history of origin/master: A--B--C Recent commit history of the local master branch: A--B--D or maybe A--B--(uncommitted changes) Your goal: get commit C into your local branch, while retaining the work in commit D or your uncommitted changes. Local state is A--B--(uncommitted changes): You could use git stash. Or you could just make a commit to simplify your life (see next bullet). Local state is A--B--D: You can get to A--B--C--D or A--B--(something that includes C and D). Local state is A--B--D--(uncommitted changes): You could just make a commit – a new one or amend D – to simplify your life (see previous bullet). We prioritize simple approaches that are good for early Git use, but mention nicer long-term alternatives. 24.1 Local work is uncommitted Remote state is A--B--C. Local state is A--B--(uncommitted changes). 24.1.1 Happy simple cases There are two happy scenarios, in which git pull will “just work”: You’ve introduced completely new files that don’t exist in the remote branch and, therefore, cannot possibly have conflicting changes. You’re in luck! You can just git pull. The files affected by your local work have ZERO overlap with the files affected by the changes you need to pull from the remote. You’re also in luck! You can just git pull. Summary of these happy git pull scenarios: Remote: A--B--C Local before &#39;git pull&#39;: A--B--(uncommitted changes) Local after &#39;git pull&#39;: A--B--C--(uncommitted changes) What has actually happened here is that git pull resulted in a fast-forward merge, i.e. we placed commit C right on the end of your history. This would also be the case in the simpler situation where recent local history was just A--B, i.e. you had not added any local work since the last sync up with origin/master. 24.1.2 git stash works, sometimes If your changes affect a file (foo.R in the example below) that has also been changed in commit C, you cannot git pull. It doesn’t hurt to try, but you will fail and it will look something like this: jenny@2015-mbp ethel $ git pull remote: Enumerating objects: 5, done. remote: Counting objects: 100% (5/5), done. remote: Compressing objects: 100% (2/2), done. remote: Total 3 (delta 1), reused 1 (delta 0), pack-reused 0 Unpacking objects: 100% (3/3), done. From github.com:jennybc/ethel db046b4..2d33a6f master -&gt; origin/master Updating db046b4..2d33a6f error: Your local changes to the following files would be overwritten by merge: foo.R Please commit your changes or stash them before you merge. Aborting Now what? First, you must safeguard your local changes by either stashing or committing them. (I personally would choose to commit and execute a workflow described in 24.2.) I am not a big fan of git stash; I think it’s usually better to take every possible chance to solidify your skills around core concepts and operations, e.g., make a commit, possibly in a branch. But if you want to use git stash, this opportunity is as good as it gets. git stash is a way to temporarily store some changes to get them out of the way. Now you can do something else, without a lot of fuss. In our case, “do something else” is to get the upstream changes with a nice, simple git pull. Then you reapply and delete the stash and pick up where you left off. For more details about stashing, I recommend The stashing coverage in the “Filesystem interactions” chapter of Git in Practice (book website or read on GitHub) 7.3 Git Tools - Stashing and Cleaning in Pro Git. Here’s the best case scenario for “stash, pull, unstash” in the example above: jenny@2015-mbp ethel $ git stash save Saved working directory and index state WIP on master: db046b4 Merge branch &#39;master&#39;of github.com:jennybc/ethel jenny@2015-mbp ethel $ git pull Updating db046b4..2d33a6f Fast-forward foo.R | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-) jenny@2015-mbp ethel $ git stash pop Auto-merging foo.R On branch master Your branch is up-to-date with &#39;origin/master&#39;. Changes not staged for commit: (use &quot;git add &lt;file&gt;...&quot; to update what will be committed) (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory) modified: foo.R no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;) Dropped refs/stash@{0} (012c4dcd3a4c3af6757c4c3ca99a9eaeff1eb2a4) That is what success looks like. You’ve achieved this: Remote: A--B--C Local before: A--B--(uncommitted changes) Local after: A--B--C--(uncommitted changes) As above, we have just enjoyed a fast-forward merge, made possible by temporarily stashing then unstashing the uncommitted local changes. 24.1.3 git stash with conflicts If your local changes have some overlap with changes you are pulling, you will, instead get a merge conflict from git stash pop. Now you have some remedial work to do. In this case, you have gained nothing by using git stash in the first place, which explains my general lack of enthusiasm for git stash. Here how to execute the git stash workflow in our example, in the face of conflicts (based on this Stack Overflow answer): jenny@2015-mbp ethel $ git stash save Saved working directory and index state WIP on master: 2d33a6f Back to 5 jenny@2015-mbp ethel $ git pull Updating 2d33a6f..1eddf9e Fast-forward foo.R | 1 + 1 file changed, 1 insertion(+) jenny@2015-mbp ethel $ git stash pop Auto-merging foo.R CONFLICT (content): Merge conflict in foo.R At this point, you must resolve the merge conflict (future link). Literally, at each locus of conflict, pick one version or the other (upstream or stashed) or create a hybrid yourself. Remove the all the markers inserted to demarcate the conflicts. Save. Since git stash pop did not go smoothly, we need to manually reset (future link) and delete the stash to finish. jenny@2015-mbp ethel $ git reset Unstaged changes after reset: M foo.R jenny@2015-mbp ethel $ git stash drop Dropped refs/stash@{0} (7928db50288e9b4d934803b6b451a000fd7242ed) Phew, we are done. We’ve achieved this: Remote: A--B--C Local before: A--B--(uncommitted changes) Local after: A--B--C--(uncommitted changes*) The asterisk on uncommitted changes* indicates that your uncommitted changes might now reflect adjustments made when you resolved the conflicts. 24.2 Local work is committed Remote state is A--B--C. Local state is A--B--D. 24.2.1 Pull (fetch and merge) The simplest option is to fetch the commits from upstream and merge them, which is what git pull does. This is a good option if you’re new to Git. It leads to a messier history, but when you are new, this is the least of your worries. Merge, be happy, and carry on. Here is the best case, no-merge-conflicts version of git pull: jenny@2015-mbp ethel $ git pull &lt; YOU WILL PROBABLY BE KICKED INTO AN EDITOR HERE RE: MERGE COMMIT MESSAGE! &gt; Merge made by the &#39;recursive&#39; strategy. README.md | 4 ++-- 1 file changed, 2 insertions(+), 2 deletions(-) Depending on your version of Git, your config, and your use of a GUI, you might be required to confirm/edit a commit message for the merge commit. Or what if things don’t go this smoothly? If commit C (on the remote) and commit D (local) have changes to the same parts of one or more files, Git may not be able to automatically merge and you will get merge conflicts. It will look something like this: jenny@2015-mbp ethel $ git pull Auto-merging foo.R CONFLICT (content): Merge conflict in foo.R Automatic merge failed; fix conflicts and then commit the result. You must resolve these conflicts (future link). Literally, at each locus of conflict, pick one version or the other (upstream or local) or create a hybrid yourself. Remove the all the markers inserted to demarcate the conflicts. Save. Mark the affected file foo.R as resolved via git add and make an explicit git commit to finalize this merge. jenny@2015-mbp ethel $ git add foo.R jenny@2015-mbp ethel $ git commit [master 20b297b] Merge branch &#39;master&#39; of github.com:jennybc/ethel Again, do not be surprised if, during git commit, you find yourself in an editor, confirming/editing the commit message for the merge commit. We’ve achieved this: Remote: A--B--C Local before: A--B--D Local after: A--B--D--(merge commit) \\_C_/ 24.2.2 Pull and rebase git pull --rebase creates a nicer history than git pull when integrating local and remote commits. It avoids a merge commit, so the history is less cluttered and is linear. It can make merge conflicts more onerous to resolve, which is why I still recommend git pull as the entry-level solution. Here is the best case, no-merge-conflicts version of git pull --rebase: jenny@2015-mbp ethel $ git pull --rebase First, rewinding head to replay your work on top of it... Applying: Take max Notice that you were NOT kicked into an editor to fiddle with the commit message for the merge commit, because there is no merge commit! This is the beauty of rebasing. We’ve achieved this: Remote: A--B--C Local before: A--B--D Local after: A--B--C--D It is as if we pulled the upstream work in commit C, then did the local work embodied in commit D. We have no cluttery merge commits and a linear history. Nice! The bad news: As with plain vanilla git pull, it is still possible to get merge conflicts with git pull --rebase. If you have multiple local commits, you can even find yourself resolving conflicts over and over, as these commits are sequentially replayed. Hence this is a better fit for more experienced Git users and in situations where conflicts are unlikely (those tend to be correlated, actually). At this point, if you try to do git pull --rebase and get bogged down in merge conflicts, I recommend git rebase --abort to back out. For now, just pursue a more straightforward strategy. 24.3 Other approaches There are many more ways to handle this situation, which you can discover and explore as you gain experience and start to care more about the history. We sketch some ideas here. 24.3.1 Use a temporary branch for local work Recall: Remote state is A--B--C. Local state is A--B--(uncommitted changes). This is an alternative to the stash workflow that has the advantage of giving you practice with Git techniques that are more generally useful. It also leads to a nice history. Create a new, temporary branch and commit your uncommitted changes there. Checkout master and git pull to get changes from upstream. You now need to recover the work from the commit in the temporary branch. Options: Merge the temporary branch into master. Cherry pick the commit from the temporary branch into master. In either case, it is still possible you will need to deal with merge conflicts. In either case, if you felt forced to commit before you were ready or to accept an ugly merge commit, you can either do a mixed reset to “uncommit” but keep the changes on master or keep amending until you are satisfied with the commit. 24.4 Some local work is committed, some is not This is an awkward hybrid situation that can be handled with a combination of strategies seen above: make a pragmatic commit on master or a temporary branch. Integrate the upstream and local changes in master. If you aren’t happy with the final pragmatic commit (which only exists locally), reset or amend until you are. "],
["pr-extend.html", "Chapter 25 Explore and extend a pull request 25.1 Terminology 25.2 Official GitHub advice, Version 1 25.3 Official GitHub advice, Version 2 25.4 Official GitHub advice, Version 3 25.5 My under-development workflow", " Chapter 25 Explore and extend a pull request Scenario: you maintain an R package on GitHub with pull requests (PRs) from external contributors e.g. Jane Doe, janedoe on GitHub. Sometimes you need to experiment with the PR in order to provide feedback or to decide whether or not to merge. Going further, sometimes you want to add a few commits and then merge. Or maybe there are just some merge conflicts that require your personal, local attention. Let’s also assume that you want the original PR author to get credit for their commits, i.e. you want to preserve history and provenance, not just diffs. How do you checkout and possibly extend an external PR? 25.1 Terminology Vocabulary I use throughout. fork branch The name of the branch in the fork from which the PR was made. Best case scenario: informative name like fix-fluffy-bunny. Worst case scenario: PR is from master. local PR branch The name of the local branch you’ll use to work with the PR. Best case scenario: can be same as fork branch. Worse case scenario: PR is from master, so you must make up a new name based on something about the PR, e.g. pr-666 or janedoe-master. PR parent The SHA of the commit in the main repo that is the base for the PR. PR remote The SSH or HTTPS URL for the fork from which the PR was made. Or the nickname of the remote, if you’ve bothered to set that up. 25.2 Official GitHub advice, Version 1 Every PR on GitHub has a link to “command line instructions” on how to merge the PR locally via command line Git. On this journey, there is a point at which you can pause and explore the PR locally. Here are their steps with my vocabulary and some example commands: Create and check out the local PR branch, anticipating its relationship to the fork branch. Template of the Git command, plus an example of how it looks under both naming scenarios: # Template of the Git command git checkout -b LOCAL_PR_BRANCH master # How it looks under both naming scenarios git checkout -b fix-fluffy-bunny master git checkout -b janedoe-master master Pull from the fork branch of the PR remote: # Template of the Git command git pull REMOTE FORK_PR_BRANCH # How it looks under both naming scenarios git pull https://github.com/janedoe/yourpackage.git fix-fluffy-bunny git pull https://github.com/janedoe/yourpackage.git master Satisfy yourself that all is well and you want to merge. Checkout master: git checkout master Merge the local PR branch into master with --no-ff, meaning “no fast forward merge”. This ensures you get a true merge commit, with two parents. # Template of the Git command git merge --no-ff LOCAL_PR_BRANCH # How it looks under both naming scenarios git merge --no-ff fix-fluffy-bunny git merge --no-ff janedoe-master Push master to GitHub. git push origin master What’s not to like? The parent commit of the local PR branch will almost certainly not be the parent commit of the fork PR branch, where the external contributor did their work. This often means you get merge conflicts in git pull, which you’ll have to deal with ASAP. The older the PR, the more likely this is and the hairier the conflicts will be. I would prefer to deal with the merge conflicts only after I’ve vetted the PR and to resolve the conflicts locally, not on GitHub. So I don’t use this exact workflow. 25.3 Official GitHub advice, Version 2 GitHub has another set of instructions: Checking out pull requests locally It starts out by referring to the Version 1 instructions, but goes on to address an inactive pull request“, defined as a PR”whose owner has either stopped responding, or, more likely, has deleted their fork&quot;. This workflow may NOT give the original PR author credit (next time it’s easy to test this, I’ll update with a definitive answer). I’ve never used it verbatim because I’ve never had this exact problem re: deleted fork. 25.4 Official GitHub advice, Version 3 GitHub has yet another set of instructions: Committing changes to a pull request branch created from a fork The page linked above explains all the pre-conditions, but the short version is that a maintainer can probably push new commits to a PR, effectively pushing commits to a fork. Strange, but true! This set of instructions suggests that you clone the fork, checkout the branch from which the PR was made, make any commits you wish, and then push. Any new commits you make will appear in the PR. And then you could merge. My main takeaway: maintainer can push to the branch of a fork associated with a PR. 25.5 My under-development workflow work in progress This combines ideas from the three above approaches, but with a few tweaks. I am sketching this up in R code, with the hope of putting this into a function and package at some point. This is a revision of an earlier approach, based on feedback from Jim Hester. Example of a PR from the master branch (suboptimal but often happens) from fictional GitHub user abcde on usethis. library(git2r) ## add the pull requester&#39;s fork as a named remote remote_add(name = &quot;abcde&quot;, url = &quot;git@github.com:abcde/usethis.git&quot;) ## fetch fetch(name = &quot;abcde&quot;) ## list remote branches and isolate the one I want b &lt;- branches(flags = &quot;remote&quot;) b &lt;- b[[&quot;abcde/master&quot;]] ## get the SHA of HEAD on this branch sha &lt;- branch_target(b) ## create local branch branch_create(commit = lookup(sha = sha), name = &quot;abcde-master&quot;) ## check it out checkout(object = &quot;.&quot;, branch = &quot;abcde-master&quot;) ## set upstream tracking branch branch_set_upstream(repository_head(), name = &quot;abcde/master&quot;) ## confirm upstream tracking branch branch_get_upstream(repository_head()) ## make one or more commits here ## push to the branch in the fork and, therefore, into the PR push() "],
["clone.html", "Chapter 26 Clone a repo", " Chapter 26 Clone a repo Clone someone else’s repository on GitHub where you just want a copy. But you also want to track its evolution. That is what differentiates a GitHub clone from, say, simply downloading the ZIP archive at a specific point in time. Pick a GitHub repository that interests you. Inspiration: an R package you care about a data analytic project you find interesting Example: The GitHub repo that underpins Polygraphing’s blog post analyzing 2,000 screenplays is here: https://github.com/brandles/scripts Example: FiveThirtyEight shared the data and code behind their Gun Deaths in America project on GitHub: https://github.com/fivethirtyeight/guns-data. Have a look around their other repos as well. Create a new RStudio Project from this GitHub repo. Refresh your memory of how to do that by re-visiting our “GitHub first” workflow in chapter 16. Once you have the code locally, try to run some of it. Try to understand how it works. Do you want to make a change? Fine do that! Do you want to send changes back to the original author? Now you have firsthand knowledge of when you should fork instead of clone. See chapter 27. "],
["fork.html", "Chapter 27 Fork a repo 27.1 Fork then clone 27.2 Fork and pull 27.3 Updating your fork", " Chapter 27 Fork a repo In the previous prompt (chapter 26), we cloned someone else’s repo to get a copy that we could keep up to date, by pulling new commits into our local copy. What if you suspect you might want to propose a change to a repository? Then you should fork it, instead of clone it. 27.1 Fork then clone On GitHub, navigate to a repo of interest. In the upper right hand corner, click Fork. This creates a copy of the repo in your GitHub account and takes you there in the browser. Use the usual workflow (chapter 26) to clone this to your local machine. 27.2 Fork and pull Make your changes locally, commit, then push back to your fork. When/if you are ready to propose a change, you place a pull request from your fork on GitHub to the original repo owned by someone else. Here’s a sketch of how this looks: 27.3 Updating your fork It is harder to keep a fork updated than a clone. Why? Because the primary remote associated with your local is your fork. But you need to get the new commits from the repository you originally forked. You need to have more than one remote associated with your local repo. If you’re nervous about command line Git, you update your fork on GitHub purely via the browser. Then pull to get the commits into your local repo: Updating a fork directly from GitHub In the long run, you will want to learn how to configure a second remote for your local repo. Pull the new commits into your local repo, then push them to your own fork: GitHub Help: Syncing a fork Here’s a handwritten sketch devised with Bill Mills in a bar, but that will have to do for now! "],
["bingo.html", "Chapter 28 Create a bingo card", " Chapter 28 Create a bingo card Here’s a specific suggestion for practicing “fork and pull”. The general workflow is laid out in chapter 27. Jenny and Dean have a repository that makes bingo cards with R: https://github.com/jennybc/bingo Read the README to learn more about it! Your mission: Maybe find a partner? Or a couple of partners? Fork the bingo repo. Clone it to someone’s local machine. Create a new bingo card by making a file of possible squares. Follow the instructions in https://github.com/jennybc/bingo/blob/master/CONTRIBUTING.md to see how to contribute a new card. Protip: It’s easy to be very funny, but create a very difficult bingo card. Remember to include some easy stuff so people have a chance to bingo. If you’re feeling virtuous, run the tests and check the package. Ask us for help! Or live dangerously and skip this. Commit! Push your changes back to your copy of the repo on GitHub. Make a pull request back to the main bingo repo. If you card is appropriate, we’ll merge your request and it will become part of the package and available via the Shiny app. Special inspiration for useR: Make useR-specific conference bingo. See this issue thread for lots of square ideas! https://github.com/jennybc/bingo/issues/4 "],
["burn.html", "Chapter 29 Burn it all down", " Chapter 29 Burn it all down This is a highly inelegant, but effective technique for disaster recovery. It has been immortalized in an xkcd comic, so it must be ok: https://xkcd.com/1597/ http://explainxkcd.com/wiki/index.php/1597:_Git Basic idea: Commit early and often. Push to a remote, like GitHub, often. The state of things on GitHub is your new “worst case scenario”. If you really screw things up locally, copy all the files (or the ones that have changed) to a safe place. Usually your files are JUST FINE. But it is easy to goof up the Git infrastructure when you’re new at this. And it can be hard to get that straightened out on your own. Rename the existing local repo as a temporary measure, i.e. before you do something radical, like delete it. Clone the repo from GitHub to your local machine. You are back to a happy state. Copy all relevant files back over from your safe space. The ones whose updated state you need to commit. Stage and commit. Push. Carry on with your life. Practice this before you need it, so you see how it works. "],
["reset.html", "Chapter 30 Resetting", " Chapter 30 Resetting Practice recovering from mistakes. Use a repository you’ve created earlier in the tutorial for this. It only needs to be local, i.e. this does not involve GitHub. If it’s not your most recent commit, seriously consider just letting that go. Just. Let. It. Go. So you want to undo the last commit? If “YES UNDO IT COMPLETELY”: git reset --hard HEAD^. You will lose any changes that were not reflected in the commit-before-last! If “YES undo the commit, but leave the files in that state (but unstaged)”: git reset HEAD^. Your files will stay the same but the commit will be undone and nothing will be staged. If “YES go right back to the moment before I committed”: git reset --soft HEAD^. Your files will stay the same but the commit will be undone. Even your staged changes will be restored. If you just want to fiddle with the most recent commit or its message, you can amend it. You can do this from RStudio! Make the change you want and amend the commit. Do you only want to change the commit message? Make another small change. Surely you have a typo somewhere? Amend the commit, which gives you the chance to edit the message To amend from the command line, using an editor to create the message: git commit --amend To amend from the command line, providing the new message: git commit --amend -m &quot;New commit message&quot; Git Reset Demystified: https://git-scm.com/book/en/v2/Git-Tools-Reset-Demystified "],
["search.html", "Chapter 31 Search GitHub 31.1 Basic resources 31.2 Use case", " Chapter 31 Search GitHub 31.1 Basic resources GitHub searching https://github.com/search/advanced https://help.github.com/articles/searching-code/ https://help.github.com/articles/search-syntax/ Read-only mirror of R source by Winston Chang: https://github.com/wch/r-source Read-only mirror of all packages on CRAN by Gábor Csárdi: https://github.com/cran http://cran.github.io METACRAN 31.2 Use case What if a function in a package has no examples? Or is poorly exampled? Wouldn’t it be nice to find functioning instances of it “in the wild”? Via Twitter, Noam Ross taught me a clever way to do such searches on GitHub. Put this into the GitHub search box to see how packages on CRAN use the llply() function from plyr: &quot;llply&quot; user:cran language:R Or just click here. Another example that recently came up on r-package-devel: How to see lots of examples of roxygen templates? This search finds &gt;1400 examples of roxygen templates in the wild: https://github.com/search?utf8=✓&amp;q=man-roxygen+in%3Apath&amp;type=Code&amp;ref=searchresults "],
["repo-browsability.html", "Chapter 32 Make a GitHub repo browsable 32.1 Be savvy about your files 32.2 Get over your hang ups re: committing derived products 32.3 Markdown 32.4 R Markdown 32.5 README.md 32.6 Finding stuff 32.7 HTML 32.8 Source code 32.9 Delimited files 32.10 PNGs 32.11 Other document formats 32.12 Linking to a ZIP archive of your repo 32.13 Links and embedded figures 32.14 Let people correct you on the internet", " Chapter 32 Make a GitHub repo browsable The unreasonable effectiveness of GitHub browsability. One of my favorite aspects of GitHub is the ability to inspect a repository’s files in a browser. Certain practices make browsing more rewarding and can postpone the day when you must create a proper website for a project. Perhaps indefinitely. 32.1 Be savvy about your files Keep files in the plainest, web-friendliest form that is compatible with your main goals. Plain text is the very best. GitHub offers special handling for certain types of files: Markdown files, which may be destined for conversion into, e.g., HTML Markdown files named README.md HTML files, often the result of compiling Markdown files Source code, such as .R files Delimited files, such as CSVs and TSVs PNG files 32.2 Get over your hang ups re: committing derived products Let’s acknowledge the discomfort some people feel about putting derived products under version control. Specifically, if you’ve got an R Markdown document foo.Rmd, it can be knit() to produce the intermediate product foo.md, which can be converted to the ultimate output foo.html. Which of those files are you “allowed” to put under version control? Source-is-real hardliners will say only foo.Rmd but pragmatists know this can be a serious bummer in real life. Just because I can rebuild everything from scratch, it doesn’t mean I want to. The taboo of keeping derived products under version control originates from compilation of binary executables from source. Software built on a Mac would not work on Windows and so it made sense to keep these binaries out of the holy source code repository. Also, you could assume the people with access to the repository have the full development stack and relish opportunities to use it. None of these arguments really apply to the foo.Rmd --&gt; foo.md --&gt; foo.html workflow. We don’t have to blindly follow traditions from the compilation domain! In fact, looking at the diffs for foo.md or foo-figure-01.png can be extremely informative. This is also true in larger data analytic projects after a make clean; make all operation. By looking at the diffs in the downstream products, you often catch unexpected changes. This can tip you off to changes in the underlying data and/or the behavior of packages you depend on. This chapter explores cool things GitHub can do with various file types, if they happen to end up in your repo. I won’t ask you how they got there. 32.3 Markdown You will quickly discover that GitHub renders Markdown files very nicely. By clicking on foo.md, you’ll get a decent preview of foo.html. Yay! You should read GitHub’s own guide on how to leverage automatic Markdown rendering. Exploit this aggressively. Make Markdown your default format for narrative text files and use them liberally to embed notes to yourself and others in a repository hosted on Github. It’s an easy way to get pseudo-webpages inside a project “for free”. You may never even compile these files to HTML explicitly; in many cases, the HTML preview offered by GitHub is all you ever need. 32.4 R Markdown What does this mean for R Markdown files? Keep intermediate Markdown. Or only render to Markdown. Commit both foo.Rmd and foo.md, even if you choose to .gitignore the final product, e.g. foo.html or foo.pdf or foo.docx. From September 2014, GitHub renders R Markdown files nicely, like Markdown, and with proper syntax highlighting, which is great. But, of course, the code blocks just sit there un-executed, so my advice about keeping Markdown still holds. If your target output format is not Markdown, you want YAML frontmatter that looks something like this for .Rmd: --- title: &quot;Something fascinating&quot; author: &quot;Jenny Bryan&quot; date: &quot;`r format(Sys.Date())`&quot; output: html_document: keep_md: TRUE --- or like this for .R: #&#39; --- #&#39; title: &quot;Something fascinating&quot; #&#39; author: &quot;Jenny Bryan&quot; #&#39; date: &quot;`r format(Sys.Date())`&quot; #&#39; output: #&#39; html_document: #&#39; keep_md: TRUE #&#39; --- The keep_md: TRUE part says to keep the intermediate Markdown. In RStudio, when editing .Rmd, click on the gear next to “Knit HTML” for YAML authoring help. Since 2016, rmarkdown offers a custom output format for GitHub-flavored markdown, github_document. Read about R Markdown workflows for explicit examples of how to use this. If Markdown is your target output format, your YAML can be even simpler and look like this for .Rmd: --- output: github_document --- or like this for .R: #&#39; --- #&#39; output: github_document #&#39; --- For a quick, stand-alone document that doesn’t fit neatly into a repository or project (yet), make it a Gist. Example: Hadley Wickham’s advice on what you need to do to become a data scientist. Gists can contain multiple files, so you can still provide the R script or R Markdown source and the resulting Markdown, as I’ve done in this write-up of Twitter-sourced tips for cross-tabulation. I’ve collected YAML examples for all the above scenarios in a gist. 32.5 README.md You probably already know that GitHub renders README.md at the top-level of your repo as the de facto landing page. This is analogous to what happens when you point a web browser at a directory instead of a specific web page: if there is a file named index.html, that’s what the server will show you by default. On GitHub, files named README.md play exactly this role for directories in your repo. Implication: for any logical group of files or mini project-within-your-project, create a sub-directory in your repository. And then create a README.md file to annotate these files, collect relevant links, etc. Now when you navigate to the sub-directory on GitHub the nicely rendered README.md will simply appear. The GitHub repo that backs the gapminder data package has a README in the data-raw subdirectory that explains exactly how the package data is created. In fact, it is generated programmatically from README.Rmd. Some repositories consist solely of README.md. Examples: Jeff Leek’s write-ups on How to share data with a statistician or Developing R packages. I am becoming a bigger fan of README-only repos than gists because repo issues trigger notifications, whereas comments on gists do not. If you’ve got a directory full of web-friendly figures, such as PNGs, you can use code like this to generate a README.md for a quick DIY gallery, as Karl Broman has done with his FruitSnacks. I did same for all the fantastic O RLY book covers made by The Practical Dev. I have also used this device to share Keynote slides on GitHub (mea culpa!). Export them as PNGs images and throw ’em into a README gallery: slides on file organization and some on file naming. 32.6 Finding stuff OK these are pure GitHub tips but if you’ve made it this far, you’re obviously a keener. Press t to activate the file finder whenever you’re in a repo’s file and directory view. AWESOME, especially when there are files tucked into lots of subdirectories. Press y to get a permanent link when you’re viewing a specific file. Watch what changes in the URL. This is important if you are about to link to a file or to specific lines. Otherwise your links will break easily in the future. If the file is deleted or renamed or if lines get inserted or deleted, your links will no longer point to what you intended. Use y to get links that include a specific commit in the URL. 32.7 HTML If you have an HTML file in a GitHub repository, simply visiting the file shows the raw HTML. Here’s a nice ugly example: https://github.com/STAT545-UBC/STAT545-UBC.github.io/blob/master/bit003_api-key-env-var.html No one wants to look at that. You can provide this URL to rawgit.com to serve this HTML more properly and get a decent preview. You can form two different types of URLs with rawgit.com: For sharing low-traffic, temporary examples or demos with small numbers of people, do this: https://rawgit.com/STAT545-UBC/STAT545-UBC.github.io/master/bit003_api-key-env-var.html Basically: replace https://github.com/ with https://rawgit.com/ For use on production websites with any amount of traffic, do this: https://cdn.rawgit.com/STAT545-UBC/STAT545-UBC.github.io/master/bit003_api-key-env-var.html Basically: replace https://github.com/ with https://cdn.rawgit.com/ 2018-10-09 update: RawGit announced that it is in a sunset phase and will soon shut down. They recommended: jsDelivr, GitHub Pages, CodeSandbox, and unpkg as alternatives. This sort of enhanced link might be one of the useful things to put in a README.md or other Markdown file in the repo. You may also want to check out this Chrome extension or GitHub &amp; BitBucket HTML Preview, though recently I’ve more success with rawgit.com. (Neither work with private GitHub repos, which is all the more reason to keep intermediate markdown files for HTML, as described above.) Sometimes including HTML files will cause GitHub to think that your R repository is HTML. Besides being slightly annoying, this can make it difficult for people to find your work if they are searching specifically for R repos. You can exclude these files or directories from GitHub’s language statistics by adding a .gitattributes file that marks them as ‘documentation’ rather than code. See an example here. 32.8 Source code You will notice that GitHub does automatic syntax highlighting for source code. For example, notice the coloring of this R script. The file’s extension is the primary determinant for if/how syntax highlighting will be applied. You can see information on recognized languages, the default extensions and more at github/linguist. You should be doing it anyway, but let this be another reason to follow convention in your use of file extensions. Note you can click on “Raw” in this context as well, to get just the plain text and nothing but the plain text. 32.9 Delimited files GitHub will nicely render tabular data in the form of .csv (comma-separated) and .tsv (tab-separated) files. You can read more in the blog post announcing this feature in August 2013 or in this GitHub help page. Advice: take advantage of this! If something in your repo can be naturally stored as delimited data, by all means, do so. Make the comma or tab your default delimiter and use the file suffixes GitHub is expecting. I have noticed that GitHub is more easily confused than R about things like quoting, so always inspect the GitHub-rendered .csv or .tsv file in the browser. You may need to do light cleaning to get the automagic rendering to work properly. Think of it as yet another way to learn about imperfections in your data. Here’s an example of a tab delimited file on GitHub: lotr_clean.tsv, originally found here (nope, IBM shut down manyeyes July 2015). Note you can click on “Raw” in this context as well, to get just the plain text and nothing but the plain text. 32.10 PNGs PNG is the “no brainer” format in which to store figures for the web. But many of us like a vector-based format, such as PDF, for general purpose figures. Bottom line: PNGs will drive you less crazy than PDFs on GitHub. To reduce the aggravation around viewing figures in the browser, make sure to have a PNG version in the repo. Examples: This PNG figure just shows up in the browser A different figure stored as PDF produces the dreaded, annoying “View Raw” speed bump. You’ll have to click through and, on my OS + browser, wait for the PDF to appear in an external PDF viewer. 2015-06-19 update: since I first wrote this GitHub has elevated its treament of PDFs so YAY. It’s slow but it works. Hopefully we are moving towards a world where you can have “web friendly” and “vector” at the same time, without undue headaches. As of October 2014, GitHub provides enhanced viewing and diffing of SVGs. So don’t read this advice as discouraging SVGs. Make them! But consider keeping a PNG around as emergency back up for now. 32.11 Other document formats You may also have a document you want others to be able to browse and interact with, but it is not in the markdown format. Fortunately, the open-source Pandoc program, written by John MacFarlane, allows you to convert a range of formats into markdown, including the widely used .docx format. When you click the Knit button in RStudio it is actually Pandoc which performs the final conversion to HTML or Microsoft Word (.docx) formats. If you are willing to use the command-line, you can perform the opposite conversion (eg .docx to .md), commonly retaining features such as headings, tables, equations and even figures. As some boilerplate, running in Windows PowerShell pandoc --extract-media .\\media -f docx .\\example.docx -t markdown_github -o example_image.md converts a word document called example.docx to markdown, and extracts the images into a directory which corresponds to a filepath in the newly created example.md document. A full list of supported formats and example code for conversions are available at https://pandoc.org/. You can also perform simple conversions to GitHub-flavored markdown from different markdown flavours (Pandoc supports markdown_mmd, markdown_php_extra and markdown_strict) from within RStudio. To do so you need to rename the file by changing the extension (eg from foo.md to foo.Rmd), then open the renamed file in RStudio and add the following text to the top of the document. --- output: github_document --- You can then click on “Knit” then “Knit to github document” to perform the conversion. See Output format for more details of controlling output formats with the YAML frontmatter. 32.12 Linking to a ZIP archive of your repo The browsability of GitHub makes your work accessible to people who care about your content but who don’t (yet) use Git themselves. What if such a person wants all the files? Yes, there is a clickable “Download ZIP” button offered by GitHub. But what if you want a link to include in an email or other document? If you add /archive/master.zip to the end of the URL for your repo, you construct a link that will download a ZIP archive of your repository. Click here to try this out on a very small repo: https://github.com/jennybc/lotr/archive/master.zip Go look in your downloads folder! 32.13 Links and embedded figures To link to another page in your repo, just use a relative link: [admin](courseAdmin/) will link to the courseAdmin/ directory inside the current directory. [admin](/courseAdmin/) will link to the top-level courseAdmin/ directory from any where in the repo The same idea also works for images. ![](image.png) will include image.png located in the current directory 32.14 Let people correct you on the internet They love that! You can create a link that takes people directly to an editing interface in the browser. Behind the scenes, assuming the click-er is signed into GitHub but is not you, this will create a fork in their account and send you a pull request. When I click the link below, I am able to actually commit directly to master for this repo. CLICK HERE to suggest an edit to this page! Here’s what that link looks like in the Markdown source: [CLICK HERE to suggest an edit to this page!](https://github.com/jennybc/happy-git-with-r/edit/master/60_workflow-make-github-repo-browsable.Rmd) and here it is with placeholders: [INVITATION TO EDIT](&lt;URL to your repo&gt;/edit/master/&lt;path to target source file&gt;) AFAIK, to do that in a slick automatic way across an entire repo/site, you need to be using Jekyll or some other automated system. But you could easily handcode such links on a small scale. "],
["classroom-overview.html", "Chapter 33 Run a course with GitHub 33.1 Benefits 33.2 The STAT 545 student setup 33.3 The homework-flow 33.4 GitHub as course management system", " Chapter 33 Run a course with GitHub GitHub makes a wonderful platform on which to run a course. I’ve been doing this on github.com since 2014 in STAT 545, an 80-student grad course in data analysis with R, and in a second large, code-intensive graduate course in statistical genomics. We’re running all of the courses for UBC’s Master of Data Science program off a private instance of GitHub Enterprise hosted in Canada. 33.1 Benefits For the instructor If you already use Git/GitHub, it’s extremely efficient to use the same workflows to manage course materials, student work, and communication with students and TAs. When I switched to Git/GitHub and R Markdown, abandoning my old “system” of accepting all manner of stuff as email attachments? It was the first time I actually ran the code in my students’ final projects, because it was so easy to get it on my computer in an organized fashion. I even made some corrections as pull requests! If you’re still in your early days with Git/GitHub, the sheer volume of operations and regular small deadlines will increase your mastery very quickly. Practice makes perfect! However, I would not recommend running a course on GitHub as your first substantial version control project. For the students I have found that students adjust to Git/GitHub fairly quickly and genuinely like it. They find it gratifying to see their beautiful, figure-rich R Markdown reports up on the internet. Since it’s easy to expose their work within the class, we do alot of peer review. I find that expertise spreads around the class like a virus. That applies to the main course substance as well as workflow. Many students are specifically interested in learning Git and GitHub, as a complement to the coding and analytical skills we teach in these courses. The fact that we use it for course mechanics kills two birds with one stone. Teaching the use of distributed version control is a valid pedagogical goal in and of itself. 33.2 The STAT 545 student setup GitHub’s Organizations/Teams and API have changed over the 3+ years we’ve been doing this, so my approach has evolved over time and is also shaped by hard experience. Major points: Create an Organization for the course. Immediately request an Education discount for the Organization, so that you get unlimited private repos. Have your students register for free, personal GitHub accounts. Encourage them to request an Education discount on their own behalf (aka “student developer pack”). But rest assured, nothing you need for your course machinery will depend on this. Get the GitHub usernames from your students – we use a Shiny app! – plus some shred of information that allows you link them back to your official course list. Create a students Team and a TA Team. I make such teams for each run of the course, e.g. 2016_students and 2016_ta. Invite students to join your course organization and the students team. Ditto for TAs and the TA team. Create a canonical name for each student, based on the official course list, i.e. lastname_firstname. Create a repository for each student, using the student’s canonical name. This is a private repository within the course Organization. I turn wikis off and either let GitHub auto-initialize or immediately push files, including a README, into the repos. Give the student team read or pull access to each student’s repo. Yes, this allows them to see each others work. I discuss this elsewhere. Give the TA team write or push access to each student’s repo. Add the student as collaborator with write or push access. Unwatch these repos personally! Wow such notification. That’s the setup! I use the gh and purrr packages to script all of this GitHub API work. In a second wave, I’ll post code snippets for the above operations. What you should NOT do (voice of experience, here): Do NOT allow students to create their own repositories. You will have a naming convention and they will never, ever, ever follow it. You need to have admin rights over their course repo, so you can manipulate it at will via the GitHub API. You will ask them to add you and the TAs as collaborators, but they will not all manage to execute this task. You will want to do various bulk operations on the repos and your API work will be simpler if the repos belong to the same Organization vs looping over randomly named repos owned by random people, subject to their whims. 33.3 The homework-flow In class, the students take possession of their repos, from RStudio via File &gt; New Project. They do the bulk of their coursework here: it is a directory on their computer, a Git repo associated with GitHub remote, and an RStudio project. Typically homework is done in R Markdown, using the github_document output format. They commit and push .Rmd, .md, and any necessary files, such a figures. Homework is submitted by opening an issue: Issue name is “Mark homework x of lastname_firstname”. OK not really, but I can dream. Body should contain SHA of their latest commit, tag(s) for the marking TA or the TA team, and, ideally, links to the file(s) to be marked. TAs leave feedback here. Actual marks are stored elsewhere and distributed via email. As the TAs mark, they close the issues. After homework submission, we randomly assign each student to review the work of two peers. Each peer review assignment takes the form of an issue, assigned to the reviewer. Students leave feedback for each other here. As the TAs mark, they read and assess these peer reviews (also marked!) and close the issues. 33.4 GitHub as course management system 2017-05-29 This section was excised from an article I am writing. It is partially redundant with the above and the the two will be merged. STAT 545 is a data wrangling and analysis course at the University of British Columbia. I was the instructor in charge for several years, which coincided with my own adoption of Git/GitHub. GitHub is used to manage the development of course material, to serve the course website, to create a discussion forum, and to host all student-submitted work. Given that students must submit their work and provide peer review of others’ work via GitHub, the use of hosted version control is an explicit, though modest, part of the course. The website Happy Git and GitHub for the useR holds our battle-tested instructions for setup and early usage. The students achieve basic competence quite quickly and find it gratifying to see their formatted, figure-rich R Markdown reports up on the internet. Since it’s easy to expose their work within the class, we conduct peer review, which helps expertise to spread quickly through the group. 33.4.1 Use a GitHub Organization GitHub Organizations are “shared accounts where groups of people can collaborate across many projects at once”. This is the most appropriate structure for stewarding course resources, since I can grant TAs and students different levels of access to various repositories. Access can be controlled at the individual user level or, more conveniently, for entire Teams. The TA Team shares write access with me on a private repository for internal matters. I provide each student with their own private repository for coursework and grant other members of the Students Team read access, in order to facilitate peer review. There is a public repository that underpins the course website (see below). We have one other public repository that exists solely so the Issues can be used as a discussion forum. GitHub actively encourages the use of its platform in teaching. As an instructor you can request a free Organization account that provides features normally available only on paid plans, such as private repositories. In fact, GitHub provides tooling for specific teaching workflows via GitHub Classroom, although I do not use it. That is not an intentional knock on their tools. I started teaching with GitHub several years before this existed and developed a different way of using the platform. I also find the GitHub Education resources to be geared more towards computer science than data science. 33.4.2 GitHub Pages for course website All course content is provided on the STAT 545 website. Each page is generated from an R Markdown document that is rendered to HTML locally using the rmarkdown package, retaining the intermediate Markdown. These pages are a mix of prose and rendered R code, reflecting the live coding done in class. All of these files and their history can be explored in the source repository. The TA team has permission to write to this repo, meaning they can (and do!) help me maintain the website. I rejoice that I am no longer the webmaster. We also get typo corrections and other input from the world at large, since this is entirely public. If I were starting from scratch today, I would continue to use R Markdown, RStudio, and GitHub Pages (see below), but would upgrade to a more modern, automated approach to rendering the pages. I now recommend R Markdown websites, bookdown, or blogdown to manage the process of creating a static website from a large and inter-related set of .Rmd files. GitHub offers several ways to host a website directly from a repository, collectively known as GitHub Pages. The STAT 545 website is a very simple Organization Page that uses a custom domain, stat545.com, instead of the default orgname.github.io. This system for managing course content is a great example of integrating the doing of work and the sharing of it. We analyze data live in class, using R, based on the scripts on the website. I re-render the associated .R or .Rmd, commit the changed files, push, and see it reflected right away on http://stat545.com. There is no separation between having an idea, implementing it, and posting on the website. 33.4.3 Student-specific private repos Early in the course I elicit GitHub usernames for registered students, via a Shiny app, and invite them to join the course Organization. I then create one private repository per student, in the STAT 545 Organization. The targeted student has write access and the other students have read access. This is somewhat controversial, due to the possibility of cheating, but I have seen more pros than cons for this setup, in the STAT 545 context. In other settings, I have also used one repo per student per homework assignment, which allows you to keep the repos completely private until homework submission, then increase their visibility during marking and peer review. Some courses will work better with one model or the other. Each student does their work in this repo, submitting a major assignment approximately once a week. The first assignment is simply to claim the repository and create a README, which proves they have all the relevant software setup and they can write a little Markdown. Each week we tackle some new data analysis or wrangling task, with increasing latitude for independence. Homework is implemented in R Markdown documents, rendered to Markdown, and pushed to GitHub. Students submit their work by opening an issue in their repo, naming the assignment in the title, providing the SHA of the associated final commit, and linking to the main .md file. We leave feedback as comments in the issue thread or, occasionally, propose changes to code via “pull requests”. Two peers are selected at random to review each assignment, a process that we also implement via GitHub Issues. At the end of term, the student (and their instructor!) can visit the repo to find an organized, navigable sequence of ~10 assignments. Each student leaves with self-written documentation of everything they’ve done, ready to consult in future projects. The last assignments require writing an R package or Shiny app, which they generally do in public repositories under their own accounts. They finish STAT 545 with several months of Git/GitHub experience and the start of a data science portfolio. "],
["notes.html", "Chapter 34 Notes 34.1 Common workflow questions 34.2 git stuff 34.3 The repeated amend 34.4 Disaster recovery 34.5 Engage with R source on GitHub 34.6 Workflow and psychology 34.7 How the square bracket links work", " Chapter 34 Notes Notes for future 34.1 Common workflow questions 34.1.1 Common predicaments and how to recover/avoid https://twitter.com/JennyBryan/status/743457387730735104 34.1.2 Keep something out of Git List it in .gitignore. 34.1.3 I didn’t mean to commit that Committing things you didn’t mean to (too big, secret). How to undo. 34.2 git stuff Git explainers, heavy on the diagrams https://twitter.com/JennyBryan/status/743548245645791232 A Visual Git Reference http://marklodato.github.io/visual-git-guide/index-en.html A successful Git branching model http://nvie.com/posts/a-successful-git-branching-model/ A successful Git branching model considered harmful https://barro.github.io/2016/02/a-succesful-git-branching-model-considered-harmful/ Git Tutorials from Atlassian https://www.atlassian.com/git/tutorials/ Software Carpentry Git Novice Lesson http://swcarpentry.github.io/git-novice/ Michael Freeman slides on Git collaboration http://slides.com/michaelfreeman/git-collaboration#/ GitHub Training materials https://services.github.com/kit/ Git for Ages 4 and Up https://www.youtube.com/watch?v=3m7BgIvC-uQ Learn Git Branching http://learngitbranching.js.org A Git Workflow Walkthrough Series http://vallandingham.me/git-workflow.html Part 1: Feature Branches Part 2: Reviewing Pull Requests Part 3: Reviewing Pull Requests Locally Part 4: Merging Pull Requests Git from the inside out https://codewords.recurse.com/issues/two/git-from-the-inside-out 34.3 The repeated amend A way to commit often, without exposing your WIP on GitHub or without creating a very cluttered history. Make changes. Reach a decent stopping point. Test, check, if a package … Render if an analysis …. Nothing broken? Commit. Don’t push. Make more progress. Keep testing or checking or rendering. Inspect diffs to watch what’s changing. Are things broken? Use an appropriate reset to fall back. Are things improving? Commit but amend the previous commit. Keep going like this until you’ve built up a commit you can be proud of. Now push. It is important to not push amended commits unless you really know what you’re doing and you can be quite sure that no one else has pulled your work. 34.4 Disaster recovery http://stackoverflow.com/questions?sort=votes Break it down: Is something wrong with my filesystem/files? Is my git repo messed up? How can I keep this from happening again? Rebase avoidance techniques. Headless state. Rebase hell. What to do when you can’t, e.g., switch branches. Stashing and WIP commits. 34.5 Engage with R source on GitHub Browsing Searching My gist, re: the cran user: https://gist.github.com/jennybc/4a1bf4e9e1bb3a0a9b56 Recent search for roxygen template usage in the wild: https://github.com/search?utf8=✓&amp;q=man-roxygen+in:path&amp;type=Code&amp;ref=searchresults Being a useful useR stay informed re: development use issues for bug reports, feature requests make pull requests 34.6 Workflow and psychology Stress of working in the open Workflows for group of 1, 2, 5, 10 Fork and Pull vs Shared Repository https://help.github.com/articles/about-collaborative-development-models/ https://help.github.com/articles/using-pull-requests/ 34.7 How the square bracket links work Context: you prefer to link with text, not a chapter or section number. GOOD! Here’s a link to Contributors. BAD. You can see contributors in 2. Facts and vocabulary Each chapter is a file. These files should begin with the chapter title using a level-one header, e.g., # Chapter Title. A chapter can be made up of sections, indicated by lower-level headers, e.g., ## A section within the chapter. There are three ways to address a section when creating links within your book: Explicit identifier: In # My header {#foo} the explicit identifier is foo. Automatically generated identifier: my-header is the auto-identifier for # My header. Pandoc creates auto-identifiers according to rules laid out in Extension: auto_identifiers. The header text, e.g., My header be used verbatim as an implicit header reference. See Extension: implicit_header_references for more. All 3 forms can be used to create cross-references but you build the links differently. Advantage of explicit identification: You are less likely to update the section header and then forget to make matching edits to references elsewhere in the book. How to make text-based links using explicit identifiers, automatic identifiers, and implicit references: Use implicit reference alone to get a link where the text is exactly the section header: [Introduce yourself to Git] Introduce yourself to Git [Success and operating systems] Success and operating systems You can provide custom text for the link with all 3 methods of addressing a section: Implicit header reference: [link text][Recommended Git clients] link text Explicit identifier: [hello git! I'm Jenny](#hello-git) hello git! I’m Jenny Automatic identifier: [Any text you want](#recommended-git-clients) Any text you want "],
["bookdown-cheat-sheet.html", "Chapter 35 Bookdown cheat sheet 35.1 Heading blah blah 35.2 About labelling things 35.3 Cross-references 35.4 Figures, tables, citations", " Chapter 35 Bookdown cheat sheet Here’s where I park little examples for myself about bookdown mechanics that I keep forgetting. 35.1 Heading blah blah 35.2 About labelling things You can label chapter and section titles using {#label} after them, e.g., we can reference Section 35.2. If you do not manually label them, there will be automatic labels anyway, e.g., this reference to the unlabelled heading 35.1 uses the automatically generated label \\@ref(heading-blah-blah). 35.3 Cross-references Add an explicit label by adding {#label} to the end of the section header. If you know you’re going to refer to something, this is probably a good idea. To refer to in a chapter- or section-number-y way, use \\@ref(label). \\@ref(install-git) example: In chapter 7 we explain how to install Git. If you are happy with the section header as the link text, use it inside a single set of square brackets: [A picture is worth a thousand words]: example “A picture is worth a thousand words” via A picture is worth a thousand words There are two ways to specify custom link text: [link text][Section header text], e.g., “pic = 1000 words” via pic = 1000 words [link text](#label), e.g., “RStudio, meet Git” via RStudio, meet Git The Pandoc documentation provides more details on automatic section IDs and implicit header references. 35.4 Figures, tables, citations Figures and tables with captions will be placed in figure and table environments, respectively. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 35.1: Here is a nice figure! Reference a figure by its code chunk label with the fig: prefix, e.g., see Figure 35.1. Similarly, you can reference tables generated from knitr::kable(), e.g., see Table 35.1. knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 35.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa You can write citations, too. For example, we are using the bookdown package (Xie 2018) in this sample book, which was built on top of R Markdown and knitr (Xie 2015). References "],
["shell.html", "A The shell A.1 What is the shell? A.2 Starting the shell A.3 Windows is special … and not in a good way A.4 Using the shell", " A The shell Even if you do most of your Git operations via a client, such as RStudio or GitKraken, you must sometimes work in the shell. As you get more comfortable with Git, you might prefer to do more and more via the command line. You might also need to use Git or file system operations on a server that lacks your usual Git client. For all these reasons, you have to know a little bit about this. A.1 What is the shell? The shell is a program on your computer whose job is to run other programs. Pseudo-synonyms are “terminal”, “command line”, and “console”. There’s a whole StackExchange thread on the differences (What is the difference between Terminal, Console, Shell, and Command Line?), but I don’t find it to be terribly enlightening. Your mileage may vary. Many programmers spend lots of time in a shell, as opposed to in GUIs, because it is very fast, concise, and ubiquitous in their relevant computing environments. This is how all work was done before we got the mouse and GUIs. The most common shell is bash and it gets thrown around as a proxy for “shell” sometimes, just like “Coke” and “Kleenex” are proxies for cola and tissues. Here we demo the use of a shell for quite modest goals: to navigate the file system, confirm the present working directory, configure Git, and configure Git remotes. A.2 Starting the shell In RStudio, go to Tools &gt; Terminal or Tools &gt; Shell. The main difference is that Tools &gt; Terminal launches a shell within RStudio, whereas Tools &gt; Shell launches one external to RStudio. In both cases, RStudio makes every effort to launch the shell in a sane working directory, i.e. in the current project. You should see a simple blinking cursor, waiting for input and look similar to this (white text on black background, or black text on white background): A.3 Windows is special … and not in a good way Windows is not the ideal platform for scientific computing and software development. A lot of the functionality is going to feel janky and strapped on. Because it is. There are no fewer than 4 possible shells you can end up in. Unless you know better, you almost certainly want to be in a Git Bash shell. A.3.0.1 Git Bash This is a bash shell that ships with Git for Windows, which is the Happy Git way to install Git on Windows. It is hopefully what RStudio will launch for you, especially from v1.1.383 and on. You can inspect and influence this directly via Tools &gt; Global Options &gt; Terminal. Unless you have good reason to do otherwise, you want to select “Git Bash” here. A Git Bash shell should look something like this: Notice MSYS in the title bar. You might also see MINGW64. If you execute echo $SHELL in Git Bash, you should see /usr/bin/bash. If you’re seeing different shell-launching behavior and you are running a very current version of RStudio and you followed the Happy Git installation instructions, we want to know. Because that’s not right. Older versions of RStudio have a tick box in Tools &gt; Global Options &gt; Terminal for “Use Git Bash as shell for Git projects”. If you won’t or can’t upgrade, then by all means select that. You might need to restart RStudio to see the effect and you must realize it only affects Projects that use Git. Let me be clear: my real advice to you is to upgrade RStudio. A.3.0.2 Command prompt This is the native Windows command line interpreter. It’s rarely what you want, at least for the work described in this book. It looks something like this: Notice the cmd.exe in the title bar, although it is not always present. You might also see “Command Prompt”. Here’s a better way to investigate: in Command Prompt, echo %comspec% gives C:\\WINDOWS\\system32\\cmd.exe. If you get an error message such as 'pwd' is not recognized as an internal or external command, operable program or batch file. from some of the other commands given here, that also suggests you have somehow launched into cmd.exe. A.3.0.3 Power Shell Another Windows shell, more modern than the command prompt. Also probably not what you want. It looks something like this: Notice the powershell.exe in the title bar. In PowerShell … wait for it … Get-ChildItem Env:ComSpec gives: Name Value ------- -------- ComSpec C:\\WINDOWS\\system32\\cmd.exe A.3.0.4 Bash via Windows Services for Linux In 2016, Microsoft launched the Windows Subsystem for Linux (WSL), “a new Windows 10 feature that enables you to run native Linux command-line tools directly on Windows”. Overall, this is a fantastic development. However, at the time of writing (January 2018), you will only have this if you’re running Windows 10 64-bit and have chosen to install the optional WSL system component. Therefore, I expect only keeners to have this and, in that case, you probably don’t need this chapter. It looks something like this: In this bash shell, echo $SHELL returns /bin/bash. FYI Microsoft also refers to WSL as Bash on Ubuntu on Windows. A.3.0.5 Windows bottom line When in doubt, you probably want to be in a Git Bash shell. A.4 Using the shell The most basic commands are listed below: pwd (print working directory). Shows directory or “folder” you are currently operating in. This is not necessarily the same as the R working directory you get from getwd(). ls (list files). Shows the files in the current working directory. This is equivalent to looking at the files in your Finder/Explorer/File Manager. Use ls -a to also list hidden files, such as .Rhistory and .git. cd (change directory). Allows you to navigate through your directories by changing the shell’s working directory. You can navigate like so: go to subdirectory foo of current working directory: cd foo go to parent of current working directory: cd .. go to your “home” directory: cd ~ or simply cd go to directory using absolute path, works regardless of your current working directory: cd /home/my_username/Desktop. Windows uses a slightly different syntax with the slashes between the folder names reversed, \\, e.g. cd C:\\Users\\MY_USERNAME\\Desktop. Pro tip 1: Dragging and dropping a file or folder into the terminal window will paste the absolute path into the window. Pro tip 2: Use the tab key to autocomplete unambiguous directory and file names. Hit tab twice to see all ambiguous options. Use arrow-up and arrow-down to repeat previous commands. Or search for previous commands with CTRL + r. A few Git commands: git status is the most used git command and informs you of your current branch, any changes or untracked files, and whether you are in sync with your remotes. git remote -v lists all remotes. Very useful for making sure git knows about your remote and that the remote address is correct. git remote add origin GITHUB_URL adds the remote GITHUB_URL with nickname origin. git remote set-url origin GITHUB_URL changes the remote url of origin to GITHUB_URL. This way you can fix typos in the remote url. Feel free to suggest other commands that deserve listing in a GitHub issue. "],
["github-pat.html", "B GitHub Personal Access Tokens B.1 GitHub API B.2 How do you authenticate yourself? B.3 Step-by-step B.4 A note about security B.5 Why .Renviron instead of bash config?", " B GitHub Personal Access Tokens If you Git push or pull via the command line, you can avoid the constant authentication challenge by caching your username and password for HTTPS access or by setting up SSH keys. This includes any Git operations done by RStudio on your behalf. But for some operations you must call the GitHub API (Application Programming Interface). And this requires that you authenticate yourself in a different way. B.1 GitHub API The first reason most people need GitHub API access is because they want to use the devtools package. It is popular for the devtools::install_github() function to install directly from GitHub. This is in contrast to installing a package from CRAN via install.packages(). Why install from GitHub instead of CRAN? The package is developed on GitHub and you prefer the development version because it has some features or bug fixes not yet on CRAN. You contribute to or use R packages that are in private repositories on GitHub (or GitHub Enterprise). CRAN is not an option. Other reasons to call the GitHub API include doing almost anything you might do in the browser, especially if you need to do it on a grand scale, i.e., create repositories or users or fetch data. I recommend the gh package for this. Which you must install from GitHub! B.2 How do you authenticate yourself? With access via API, what plays the role of the HTTPS username/password or SSH keys? For the GitHub API, we use a personal access token (PAT), which is a convention followed by many other APIs. You will need to: Obtain a PAT. This is done in the browser. Store it so packages like devtools can find it and use it on your behalf. The path of least resistance is to define it in your .Renviron file as the environment variable named GITHUB_PAT. B.3 Step-by-step Login to your GitHub account. Go to https://github.com/settings/tokens. “Generate new token”. Give it a nickname that reminds you of the intended purpose, e.g., “devtools”. Pick scopes that confer the privileges you need. When in doubt, check the repo scope, which is required for typical devtools operations. There used to be a set of default scopes, but that no longer appears to be true. After you click “Generate token”, the token will be displayed. It’s a string of 40 random letters and digits. This is the last time you will see it SO COPY IT TO THE CLIPBOARD. Leave this window open until you’re done. If you somehow goof this up, just generate a new one and try again. Put your PAT in your .Renviron file. Have a line that looks like this: GITHUB_PAT=8c70fd8419398999c9ac5bacf3192882193cadf2 but with your PAT instead of mine. Don’t worry, I’ve revoked this one! .Renviron is a hidden file that lives in your home directory. Not sure where that is? The easiest way to find and edit .Renviron is with a function from the usethis package. In R, do: usethis::edit_r_environ() Your .Renviron file should pop up in your editor. Add your GITHUB_PAT as above, save and close it. Put a line break at the end! If you’re using an editor that shows line numbers, there should be two lines, where the second one is empty. If questioned, YES you do want to use a filename that begins with a dot .. Note that, by default, most dotfiles are hidden in the RStudio file browser, but .Renviron should always be visible. Restart R (Session &gt; Restart R in the RStudio menu bar), as environment variables are loaded from .Renviron only at the start of an R session. Check that the PAT is now available like so: Sys.getenv(&quot;GITHUB_PAT&quot;) You should see your PAT print to screen. Now commands you run from the devtools package, which consults GITHUB_PAT by default, will be able to access private GitHub repositories to which you have access, and you can install them with devtools::install_github('username/reponame'). B.4 A note about security Many R packages that access web services, such as those maintained by rOpenSci, give the option of storing API “tokens” or “keys” as environment variables in your .Renviron file. These tokens and this file, should never be committed to GitHub, stored in Dropbox, or on any other online service. They should not appear in your code or code comments. This is one reason why this file is stored outside your project folder. These tokens can be used to access your accounts and wreak all kinds of havoc. If you mistakenly share your tokens, log into the relevant site via the browser, revoke the compromised token, and generate a new one. B.5 Why .Renviron instead of bash config? FAQ: Why define this environment variable via .Renviron instead of in .bash_profile or .bashrc?* Because there are many combinations of OS and ways of running R where the .Renviron approach “just works” and the bash stuff does not. When R is a child process of, say, Emacs or RStudio, you can’t always count on environment variables being passed to R. Put them in an R-specific start-up file and save yourself some grief. "],
["comic-relief.html", "C Comic relief", " C Comic relief It’s not you, it’s Git! If you’re not crying already, these fictional-but-realistic Git man pages should do the trick: git-man-page-generator And, of course, the underlying source is also available on GitHub: https://github.com/Lokaltog/git-man-page-generator If you can tolerate adult and often offensive language, you might enjoy: http://www.commitlogsfromlastnight.com http://ohshitgit.com/ Your commits will look more glorious scrolling by Star Wars style: http://starlogs.net http://starlogs.net/#jennybc/googlesheets Do this for any repo: http://starlogs.net/#USER/REPO "],
["references.html", "D References", " D References D.0.1 Resources We practice what we preach! This site is created with Git and R markdown, using the bookdown package. Go ahead and peek behind the scenes. Long-term, you should understand more about what you are doing. Rote clicking in RStudio may be a short-term survival method but won’t work for long. trygit is to (command line) Git as swirl is to R. Learn by doing, in small bites. The book Pro Git is fantastic and comprehensive. Git in Practice by Mike McQuaid is an more approachable book, probably better than Pro Git for most people starting out. Ancillary materials on GitHub. GitHub’s own training materials may be helpful. They also point to many other resources Find a powerful Git client (chapter 9) if you’d like to minimize your usage of Git from the command line. Hadley Wickham’s book R Packages has an excellent chapter on the use of Git, GitHub, and RStudio in R package development. He covers more advanced usage, such as commit best practices, issues, branching, and pull requests. Ten Simple Rules for Taking Advantage of Git and GitHub http://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1004947 RStudio’s guide Version Control with Git and SVN "]
]
